Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.1 Build 20201112_000000

Compiler options: -c -O4 -fopenmp -qopt-report=5 -qopt-report-phase=vec

Begin optimization report for: BT

    Report from: Vector optimizations [vec]


LOOP BEGIN at bt.f(74,10)
   remark #15389: vectorization support: reference t_names(Impl_lp+1,1) has unaligned access
   remark #15389: vectorization support: reference at (74:29) has unaligned access   [ bt.f(74,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.720 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bt.f(79,10)
   remark #15389: vectorization support: reference t_names(Impl_lp+1,6) has unaligned access
   remark #15389: vectorization support: reference at (79:30) has unaligned access   [ bt.f(79,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bt.f(80,10)
   remark #15389: vectorization support: reference t_names(Impl_lp+1,7) has unaligned access
   remark #15389: vectorization support: reference at (80:30) has unaligned access   [ bt.f(80,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bt.f(81,10)
   remark #15389: vectorization support: reference t_names(Impl_lp+1,8) has unaligned access
   remark #15389: vectorization support: reference at (81:30) has unaligned access   [ bt.f(81,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bt.f(82,10)
   remark #15389: vectorization support: reference t_names(Impl_lp+1,9) has unaligned access
   remark #15389: vectorization support: reference at (82:29) has unaligned access   [ bt.f(82,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bt.f(83,10)
   remark #15389: vectorization support: reference t_names(Impl_lp+1,10) has unaligned access
   remark #15389: vectorization support: reference at (83:30) has unaligned access   [ bt.f(83,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bt.f(128,8)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at bt.f(146,8)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at bt.f(151,8)
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ bt.f(155,14) ]
   remark #15382: vectorization support: call to function adi_ cannot be vectorized   [ bt.f(159,16) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (155:14) and at (155:14)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (155:14) and at (155:14)
LOOP END

LOOP BEGIN at bt.f(188,8)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at bt.f(200,14)
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ bt.f(196,11) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ bt.f(196,11) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ bt.f(196,11) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ bt.f(199,14) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ bt.f(199,14) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ bt.f(199,14) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ bt.f(201,14) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ bt.f(201,14) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ bt.f(201,14) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ bt.f(205,14) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ bt.f(205,14) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ bt.f(205,14) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (196:11) and at (205:14)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (205:14) and at (196:11)
LOOP END
===========================================================================
