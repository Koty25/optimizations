Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.1 Build 20201112_000000

Compiler options: -c -O4 -fopenmp -qopt-report=5 -qopt-report-phase=vec

Begin optimization report for: MATVEC_SUB

    Report from: Vector optimizations [vec]


LOOP BEGIN at solve_subs.f(23,10)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at solve_subs.f(23,10)
   remark #15388: vectorization support: reference bvec(Impl_lp+1) has aligned access
   remark #15388: vectorization support: reference bvec(Impl_lp+1) has aligned access   [ solve_subs.f(23,20) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,1) has aligned access   [ solve_subs.f(23,30) ]
   remark #15389: vectorization support: reference ablock(Impl_lp+1,2) has unaligned access   [ solve_subs.f(24,30) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,3) has aligned access   [ solve_subs.f(25,30) ]
   remark #15389: vectorization support: reference ablock(Impl_lp+1,4) has unaligned access   [ solve_subs.f(26,30) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,5) has aligned access   [ solve_subs.f(27,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.800
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 4 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 29 
   remark #15477: vector cost: 15.000 
   remark #15478: estimated potential speedup: 1.280 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at solve_subs.f(23,10)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at solve_subs.f(23,10)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: MATMUL_SUB

    Report from: Vector optimizations [vec]


LOOP BEGIN at solve_subs.f(71,10)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at solve_subs.f(71,10)
   remark #15389: vectorization support: reference cblock(Impl_lp+1,1) has unaligned access
   remark #15389: vectorization support: reference cblock(Impl_lp+1,1) has unaligned access   [ solve_subs.f(71,24) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,1) has aligned access   [ solve_subs.f(71,38) ]
   remark #15389: vectorization support: reference ablock(Impl_lp+1,2) has unaligned access   [ solve_subs.f(72,38) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,3) has aligned access   [ solve_subs.f(73,38) ]
   remark #15389: vectorization support: reference ablock(Impl_lp+1,4) has unaligned access   [ solve_subs.f(74,38) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,5) has aligned access   [ solve_subs.f(75,38) ]
   remark #15389: vectorization support: reference cblock(Impl_lp+1,2) has unaligned access   [ solve_subs.f(96,10) ]
   remark #15389: vectorization support: reference cblock(Impl_lp+1,2) has unaligned access   [ solve_subs.f(96,24) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,1) has aligned access   [ solve_subs.f(96,38) ]
   remark #15389: vectorization support: reference ablock(Impl_lp+1,2) has unaligned access   [ solve_subs.f(97,38) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,3) has aligned access   [ solve_subs.f(98,38) ]
   remark #15389: vectorization support: reference ablock(Impl_lp+1,4) has unaligned access   [ solve_subs.f(99,38) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,5) has aligned access   [ solve_subs.f(100,38) ]
   remark #15389: vectorization support: reference cblock(Impl_lp+1,3) has unaligned access   [ solve_subs.f(121,10) ]
   remark #15389: vectorization support: reference cblock(Impl_lp+1,3) has unaligned access   [ solve_subs.f(121,24) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,1) has aligned access   [ solve_subs.f(121,38) ]
   remark #15389: vectorization support: reference ablock(Impl_lp+1,2) has unaligned access   [ solve_subs.f(122,38) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,3) has aligned access   [ solve_subs.f(123,38) ]
   remark #15389: vectorization support: reference ablock(Impl_lp+1,4) has unaligned access   [ solve_subs.f(124,38) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,5) has aligned access   [ solve_subs.f(125,38) ]
   remark #15389: vectorization support: reference cblock(Impl_lp+1,4) has unaligned access   [ solve_subs.f(146,10) ]
   remark #15389: vectorization support: reference cblock(Impl_lp+1,4) has unaligned access   [ solve_subs.f(146,24) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,1) has aligned access   [ solve_subs.f(146,38) ]
   remark #15389: vectorization support: reference ablock(Impl_lp+1,2) has unaligned access   [ solve_subs.f(147,38) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,3) has aligned access   [ solve_subs.f(148,38) ]
   remark #15389: vectorization support: reference ablock(Impl_lp+1,4) has unaligned access   [ solve_subs.f(149,38) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,5) has aligned access   [ solve_subs.f(150,38) ]
   remark #15389: vectorization support: reference cblock(Impl_lp+1,5) has unaligned access   [ solve_subs.f(171,10) ]
   remark #15389: vectorization support: reference cblock(Impl_lp+1,5) has unaligned access   [ solve_subs.f(171,24) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,1) has aligned access   [ solve_subs.f(171,38) ]
   remark #15389: vectorization support: reference ablock(Impl_lp+1,2) has unaligned access   [ solve_subs.f(172,38) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,3) has aligned access   [ solve_subs.f(173,38) ]
   remark #15389: vectorization support: reference ablock(Impl_lp+1,4) has unaligned access   [ solve_subs.f(174,38) ]
   remark #15388: vectorization support: reference ablock(Impl_lp+1,5) has aligned access   [ solve_subs.f(175,38) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.573
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 3 
   remark #15450: unmasked unaligned unit stride loads: 7 
   remark #15451: unmasked unaligned unit stride stores: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 146 
   remark #15477: vector cost: 78.500 
   remark #15478: estimated potential speedup: 1.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at solve_subs.f(96,10)
LOOP END

LOOP BEGIN at solve_subs.f(121,10)
LOOP END

LOOP BEGIN at solve_subs.f(146,10)
LOOP END

LOOP BEGIN at solve_subs.f(171,10)
LOOP END

LOOP BEGIN at solve_subs.f(71,10)
<Remainder loop for vectorization>
LOOP END
===========================================================================
