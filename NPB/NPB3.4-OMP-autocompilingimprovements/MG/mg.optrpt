Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.1 Build 20201112_000000

Compiler options: -c -O4 -fopenmp -qopt-report=5 -qopt-report-phase=vec

Begin optimization report for: MG

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(83,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at mg.f(96,10)
   remark #15389: vectorization support: reference t_names(Impl_lp+1,2) has unaligned access
   remark #15389: vectorization support: reference at (96:29) has unaligned access   [ mg.f(96,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(98,10)
   remark #15389: vectorization support: reference t_names(Impl_lp+1,4) has unaligned access
   remark #15389: vectorization support: reference at (98:29) has unaligned access   [ mg.f(98,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.720 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(99,10)
   remark #15389: vectorization support: reference t_names(Impl_lp+1,5) has unaligned access
   remark #15389: vectorization support: reference at (99:29) has unaligned access   [ mg.f(99,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.720 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(100,10)
   remark #15389: vectorization support: reference t_names(Impl_lp+1,7) has unaligned access
   remark #15389: vectorization support: reference at (100:29) has unaligned access   [ mg.f(100,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.720 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(101,10)
   remark #15389: vectorization support: reference t_names(Impl_lp+1,8) has unaligned access
   remark #15389: vectorization support: reference at (101:30) has unaligned access   [ mg.f(101,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(102,10)
   remark #15389: vectorization support: reference t_names(Impl_lp+1,9) has unaligned access
   remark #15389: vectorization support: reference at (102:29) has unaligned access   [ mg.f(102,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.720 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(103,10)
   remark #15389: vectorization support: reference t_names(Impl_lp+1,10) has unaligned access
   remark #15389: vectorization support: reference at (103:29) has unaligned access   [ mg.f(103,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.720 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(124,10)
   remark #15389: vectorization support: reference debug_vec(i) has unaligned access   [ mg.f(125,13) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.060 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(165,7)
   remark #15389: vectorization support: reference a(Impl_lp) has unaligned access
   remark #15388: vectorization support: reference at (165:7) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.300
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(182,10)
   remark #15389: vectorization support: reference c(Impl_lp) has unaligned access
   remark #15388: vectorization support: reference at (182:10) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.300
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(174,10)
   remark #15389: vectorization support: reference c(Impl_lp) has unaligned access
   remark #15388: vectorization support: reference at (174:10) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.300
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(234,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at mg.f(247,7)
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mg.f(249,13) ]
   remark #15382: vectorization support: call to function timer_start_ cannot be vectorized   [ mg.f(252,23) ]
   remark #15382: vectorization support: call to function MG3P cannot be vectorized   [ mg.f(253,15) ]
   remark #15382: vectorization support: call to function timer_stop_ cannot be vectorized   [ mg.f(254,23) ]
   remark #15382: vectorization support: call to function timer_start_ cannot be vectorized   [ mg.f(255,23) ]
   remark #15382: vectorization support: call to function RESID cannot be vectorized   [ mg.f(256,15) ]
   remark #15382: vectorization support: call to function timer_stop_ cannot be vectorized   [ mg.f(257,23) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (249:13) and at (249:13)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (249:13) and at (249:13)
LOOP END

LOOP BEGIN at mg.f(347,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at mg.f(1424,7) inlined into mg.f(193,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(1426,13) inlined into mg.f(193,12)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mg.f(1426,13) inlined into mg.f(193,12)
         remark #15389: vectorization support: reference at (1427:16) has unaligned access   [ mg.f(1427,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mg.f(1426,13) inlined into mg.f(193,12)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mg.f(1424,7) inlined into mg.f(225,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(1426,13) inlined into mg.f(225,12)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mg.f(1426,13) inlined into mg.f(225,12)
         remark #15389: vectorization support: reference at (1427:16) has unaligned access   [ mg.f(1427,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mg.f(1426,13) inlined into mg.f(225,12)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mg.f(953,7) inlined into mg.f(243,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(243,12)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(243,12)
      remark #15388: vectorization support: reference at (956:31) has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference at (956:31) has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference at (957:22) has aligned access   [ mg.f(957,22) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.316
      remark #15355: vectorization support: %s is double type reduction   [ mg.f(951,7) ]
      remark #15355: vectorization support: %.2.46_2fast_red_auto.179 is double type reduction   [ mg.f(951,7) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 21 
      remark #15477: vector cost: 19.000 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(243,12)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mg.f(953,7) inlined into mg.f(261,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(261,12)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(261,12)
      remark #15388: vectorization support: reference at (956:31) has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference at (956:31) has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference at (957:22) has aligned access   [ mg.f(957,22) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.316
      remark #15355: vectorization support: %s is double type reduction   [ mg.f(951,7) ]
      remark #15355: vectorization support: %.2.46_2fast_red_auto.234 is double type reduction   [ mg.f(951,7) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 21 
      remark #15477: vector cost: 19.000 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(261,12)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: RESID

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(1285,7) inlined into mg.f(641,15)
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mg.f(1287,13) ]
   remark #15382: vectorization support: call to function for_write_seq_lis cannot be vectorized   [ mg.f(1289,10) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1289:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1289:10) and at (1287:13)

   LOOP BEGIN at mg.f(1286,10) inlined into mg.f(641,15)
      remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mg.f(1287,13) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1287:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1287:13)
   LOOP END
LOOP END

LOOP BEGIN at mg.f(607,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(609,13)
   <Peeled>
      remark #15388: vectorization support: reference u2(i1) has aligned access   [ mg.f(612,16) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(612,25) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(612,43) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(613,25) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(613,43) ]
      remark #15388: vectorization support: reference u1(i1) has aligned access   [ mg.f(610,16) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(610,25) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(610,41) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(611,25) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(611,41) ]
      remark #15389: vectorization support: reference r has unaligned access   [ mg.f(616,16) ]
      remark #15389: vectorization support: reference v has unaligned access   [ mg.f(616,30) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(617,37) ]
      remark #15389: vectorization support: reference u2(i1) has unaligned access   [ mg.f(624,30) ]
      remark #15388: vectorization support: reference u1(i1-1) has aligned access   [ mg.f(624,30) ]
      remark #15388: vectorization support: reference u1(i1+1) has aligned access   [ mg.f(624,46) ]
      remark #15388: vectorization support: reference u2(i1-1) has aligned access   [ mg.f(625,30) ]
      remark #15388: vectorization support: reference u2(i1+1) has aligned access   [ mg.f(625,30) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.709
      remark #15301: FUSED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 4 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15450: unmasked unaligned unit stride loads: 11 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 50 
      remark #15477: vector cost: 27.500 
      remark #15478: estimated potential speedup: 1.810 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(615,13)
   <Peeled>
   LOOP END

   LOOP BEGIN at mg.f(609,13)
   <Peeled, Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mg.f(953,7) inlined into mg.f(637,15)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(637,15)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(637,15)
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(957,22) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.316
      remark #15355: vectorization support: %s is double type reduction   [ mg.f(951,7) ]
      remark #15355: vectorization support: %.2.47_2fast_red_auto.133 is double type reduction   [ mg.f(951,7) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 21 
      remark #15477: vector cost: 19.000 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(637,15)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: COMM3

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(1020,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(1021,10)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is unknown to compiler   [ mg.f(1022,13) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is unknown to compiler   [ mg.f(1022,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is unknown to compiler   [ mg.f(1023,13) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is unknown to compiler   [ mg.f(1023,13) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.250
      remark #15452: unmasked strided loads: 2 
      remark #15453: unmasked strided stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 8.000 
      remark #15478: estimated potential speedup: 0.870 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(1021,10)
   <Remainder>
   LOOP END

   LOOP BEGIN at mg.f(1028,10)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(1028,10)
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(1029,13) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(1029,13) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(1030,13) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(1030,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 4.000 
      remark #15478: estimated potential speedup: 1.710 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(1028,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at mg.f(1028,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mg.f(1035,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(1036,10)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(1036,10)
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(1037,13) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(1037,13) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(1038,13) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(1038,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 4.000 
      remark #15478: estimated potential speedup: 1.710 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(1036,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at mg.f(1036,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: MG3P

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(465,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at mg.f(478,7)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at mg.f(1424,7) inlined into mg.f(475,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(1426,13) inlined into mg.f(475,12)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mg.f(1426,13) inlined into mg.f(475,12)
         remark #15389: vectorization support: reference z has unaligned access   [ mg.f(1427,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mg.f(1426,13) inlined into mg.f(475,12)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mg.f(1424,7) inlined into mg.f(483,15)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(1426,13) inlined into mg.f(483,15)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mg.f(1426,13) inlined into mg.f(483,15)
         remark #15389: vectorization support: reference z has unaligned access   [ mg.f(1427,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mg.f(1426,13) inlined into mg.f(483,15)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: INTERP

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(1285,7) inlined into mg.f(910,15)
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mg.f(1287,13) ]
   remark #15382: vectorization support: call to function for_write_seq_lis cannot be vectorized   [ mg.f(1289,10) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1289:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1289:10) and at (1287:13)

   LOOP BEGIN at mg.f(1286,10) inlined into mg.f(910,15)
      remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mg.f(1287,13) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1287:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1287:13)
   LOOP END
LOOP END

LOOP BEGIN at mg.f(1285,7) inlined into mg.f(911,15)
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mg.f(1287,13) ]
   remark #15382: vectorization support: call to function for_write_seq_lis cannot be vectorized   [ mg.f(1289,10) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1289:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1289:10) and at (1287:13)

   LOOP BEGIN at mg.f(1286,10) inlined into mg.f(911,15)
      remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mg.f(1287,13) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1287:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1287:13)
   LOOP END
LOOP END

LOOP BEGIN at mg.f(840,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(842,16)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(842,16)
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(844,25) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(843,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(843,46) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.250
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 1.180 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(842,16)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(846,16)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(846,16)
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(848,32) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(848,46) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(847,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(847,46) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.156
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 8.000 
      remark #15478: estimated potential speedup: 1.360 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(846,16)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mg.f(853,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(855,16)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(855,16)
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(857,32) ]
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(857,46) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(856,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(856,46) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.233
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 7.500 
      remark #15478: estimated potential speedup: 1.440 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(855,16)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at mg.f(855,16)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(859,16)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(859,16)
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(861,33) ]
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(861,49) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(862,25) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(862,41) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(860,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(860,46) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.167
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 17 
      remark #15477: vector cost: 10.500 
      remark #15478: estimated potential speedup: 1.590 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(859,16)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at mg.f(859,16)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(861,33) ]
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(861,49) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(862,25) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(862,41) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.533
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 17 
      remark #15477: vector cost: 10.500 
      remark #15478: estimated potential speedup: 1.590 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at mg.f(868,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(870,16)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(870,16)
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(872,32) ]
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(872,46) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(871,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(871,46) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.233
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 7.500 
      remark #15478: estimated potential speedup: 1.440 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(870,16)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at mg.f(870,16)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(874,16)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(874,16)
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(876,33) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(876,49) ]
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(877,25) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(877,41) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(875,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(875,46) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.167
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 17 
      remark #15477: vector cost: 10.500 
      remark #15478: estimated potential speedup: 1.590 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(874,16)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at mg.f(874,16)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(876,33) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(876,49) ]
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(877,25) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(877,41) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.533
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 17 
      remark #15477: vector cost: 10.500 
      remark #15478: estimated potential speedup: 1.590 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at mg.f(882,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(884,16)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(884,16)
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(886,33) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(886,49) ]
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(887,25) ]
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(887,41) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(885,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(885,46) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.238
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 17 
      remark #15477: vector cost: 10.500 
      remark #15478: estimated potential speedup: 1.590 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(884,16)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at mg.f(884,16)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(886,33) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(886,49) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(887,25) ]
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(887,41) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.633
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 27 
      remark #15477: vector cost: 16.500 
      remark #15478: estimated potential speedup: 1.610 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(889,16)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(889,16)
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(891,34) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(891,52) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(892,25) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(892,43) ]
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(893,25) ]
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(893,43) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(894,25) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(894,43) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(890,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(890,46) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.197
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 27 
      remark #15477: vector cost: 16.500 
      remark #15478: estimated potential speedup: 1.610 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(889,16)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at mg.f(889,16)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(891,34) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(891,52) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(892,25) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(892,43) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(893,25) ]
      remark #15388: vectorization support: reference z has aligned access   [ mg.f(893,43) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(894,25) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(894,43) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.560
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 27 
      remark #15477: vector cost: 16.500 
      remark #15478: estimated potential speedup: 1.610 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at mg.f(776,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(779,16)
      remark #15388: vectorization support: reference z1(i1) has aligned access   [ mg.f(780,19) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(780,28) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(780,44) ]
      remark #15388: vectorization support: reference z2(i1) has aligned access   [ mg.f(781,19) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(781,28) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(781,44) ]
      remark #15388: vectorization support: reference z3(i1) has aligned access   [ mg.f(782,19) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(782,28) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(782,46) ]
      remark #15388: vectorization support: reference z1(i1) has aligned access   [ mg.f(782,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.143
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 22 
      remark #15477: vector cost: 10.500 
      remark #15478: estimated potential speedup: 2.070 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(779,16)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference z1(i1) has aligned access   [ mg.f(780,19) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(780,28) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(780,44) ]
      remark #15388: vectorization support: reference z2(i1) has aligned access   [ mg.f(781,19) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(781,28) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(781,44) ]
      remark #15388: vectorization support: reference z3(i1) has aligned access   [ mg.f(782,19) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(782,28) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(782,46) ]
      remark #15388: vectorization support: reference z1(i1) has aligned access   [ mg.f(782,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.651
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15450: unmasked unaligned unit stride loads: 5 
      remark #15452: unmasked strided loads: 8 
      remark #15453: unmasked strided stores: 8 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 78 
      remark #15477: vector cost: 57.000 
      remark #15478: estimated potential speedup: 1.360 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(785,16)
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(786,19) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(787,25) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(789,32) ]
      remark #15389: vectorization support: reference z has unaligned access   [ mg.f(789,46) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(792,19) ]
      remark #15388: vectorization support: reference z1(i1) has aligned access   [ mg.f(792,41) ]
      remark #15388: vectorization support: reference z1(i1) has aligned access   [ mg.f(794,39) ]
      remark #15389: vectorization support: reference z1(i1+1) has unaligned access   [ mg.f(794,39) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(798,19) ]
      remark #15388: vectorization support: reference z2(i1) has aligned access   [ mg.f(798,41) ]
      remark #15388: vectorization support: reference z2(i1) has aligned access   [ mg.f(800,39) ]
      remark #15389: vectorization support: reference z2(i1+1) has unaligned access   [ mg.f(800,39) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(804,19) ]
      remark #15388: vectorization support: reference z3(i1) has aligned access   [ mg.f(804,39) ]
      remark #15388: vectorization support: reference z3(i1) has aligned access   [ mg.f(806,37) ]
      remark #15389: vectorization support: reference z3(i1+1) has unaligned access   [ mg.f(806,37) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(786,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(786,43) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(788,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(788,41) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(792,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(792,41) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(794,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(794,39) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(798,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(798,41) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(800,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(800,39) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(804,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(804,39) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <u>, stride is 2   [ mg.f(806,19) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <u>, stride is 2   [ mg.f(806,37) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.158
      remark #15301: FUSED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 5 
      remark #15450: unmasked unaligned unit stride loads: 5 
      remark #15452: unmasked strided loads: 8 
      remark #15453: unmasked strided stores: 8 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 78 
      remark #15477: vector cost: 57.000 
      remark #15478: estimated potential speedup: 1.360 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(791,16)
   LOOP END

   LOOP BEGIN at mg.f(797,16)
   LOOP END

   LOOP BEGIN at mg.f(803,16)
   LOOP END

   LOOP BEGIN at mg.f(785,16)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mg.f(953,7) inlined into mg.f(905,15)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(905,15)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(905,15)
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(957,22) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.316
      remark #15355: vectorization support: %s is double type reduction   [ mg.f(951,7) ]
      remark #15355: vectorization support: %.2.50_2fast_red_auto.328 is double type reduction   [ mg.f(951,7) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 21 
      remark #15477: vector cost: 19.000 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(905,15)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mg.f(953,7) inlined into mg.f(906,15)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(906,15)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(906,15)
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(957,22) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.316
      remark #15355: vectorization support: %s is double type reduction   [ mg.f(951,7) ]
      remark #15355: vectorization support: %.2.50_2fast_red_auto.383 is double type reduction   [ mg.f(951,7) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 21 
      remark #15477: vector cost: 19.000 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(906,15)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PSINV

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(1285,7) inlined into mg.f(570,15)
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mg.f(1287,13) ]
   remark #15382: vectorization support: call to function for_write_seq_lis cannot be vectorized   [ mg.f(1289,10) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1289:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1289:10) and at (1287:13)

   LOOP BEGIN at mg.f(1286,10) inlined into mg.f(570,15)
      remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mg.f(1287,13) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1287:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1287:13)
   LOOP END
LOOP END

LOOP BEGIN at mg.f(536,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(538,13)
   <Peeled>
      remark #15388: vectorization support: reference r2(i1) has aligned access   [ mg.f(541,16) ]
      remark #15389: vectorization support: reference r has unaligned access   [ mg.f(541,25) ]
      remark #15389: vectorization support: reference r has unaligned access   [ mg.f(541,43) ]
      remark #15389: vectorization support: reference r has unaligned access   [ mg.f(542,25) ]
      remark #15389: vectorization support: reference r has unaligned access   [ mg.f(542,43) ]
      remark #15388: vectorization support: reference r1(i1) has aligned access   [ mg.f(539,16) ]
      remark #15389: vectorization support: reference r has unaligned access   [ mg.f(539,25) ]
      remark #15389: vectorization support: reference r has unaligned access   [ mg.f(539,41) ]
      remark #15389: vectorization support: reference r has unaligned access   [ mg.f(540,25) ]
      remark #15389: vectorization support: reference r has unaligned access   [ mg.f(540,41) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(545,16) ]
      remark #15389: vectorization support: reference u has unaligned access   [ mg.f(545,30) ]
      remark #15389: vectorization support: reference r has unaligned access   [ mg.f(546,37) ]
      remark #15389: vectorization support: reference r has unaligned access   [ mg.f(547,39) ]
      remark #15389: vectorization support: reference r has unaligned access   [ mg.f(547,55) ]
      remark #15389: vectorization support: reference r1(i1) has unaligned access   [ mg.f(547,53) ]
      remark #15389: vectorization support: reference r2(i1) has unaligned access   [ mg.f(549,30) ]
      remark #15388: vectorization support: reference r1(i1-1) has aligned access   [ mg.f(549,30) ]
      remark #15388: vectorization support: reference r1(i1+1) has aligned access   [ mg.f(549,46) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15301: FUSED LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15450: unmasked unaligned unit stride loads: 14 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 52 
      remark #15477: vector cost: 30.000 
      remark #15478: estimated potential speedup: 1.720 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(544,13)
   <Peeled>
   LOOP END

   LOOP BEGIN at mg.f(538,13)
   <Peeled, Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mg.f(953,7) inlined into mg.f(566,15)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(566,15)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(566,15)
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(957,22) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.316
      remark #15355: vectorization support: %s is double type reduction   [ mg.f(951,7) ]
      remark #15355: vectorization support: %.2.51_2fast_red_auto.132 is double type reduction   [ mg.f(951,7) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 21 
      remark #15477: vector cost: 19.000 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(566,15)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: RPRJ3

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(1285,7) inlined into mg.f(734,15)
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mg.f(1287,13) ]
   remark #15382: vectorization support: call to function for_write_seq_lis cannot be vectorized   [ mg.f(1289,10) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1289:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1289:10) and at (1287:13)

   LOOP BEGIN at mg.f(1286,10) inlined into mg.f(734,15)
      remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mg.f(1287,13) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1287:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1287:13)
   LOOP END
LOOP END

LOOP BEGIN at mg.f(695,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(700,13)
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <x1(i1-1)>, stride is 2   [ mg.f(702,15) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(702,26) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(702,46) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(703,26) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(703,46) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <y1(i1-1)>, stride is 2   [ mg.f(704,15) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(704,26) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(704,46) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(705,26) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(705,46) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.012
      remark #15300: LOOP WAS VECTORIZED
      remark #15452: unmasked strided loads: 8 
      remark #15453: unmasked strided stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 25 
      remark #15477: vector cost: 20.500 
      remark #15478: estimated potential speedup: 1.210 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(700,13)
   <Remainder loop for vectorization>
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.293
      remark #15301: REMAINDER LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 15 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 52 
      remark #15477: vector cost: 53.000 
      remark #15478: estimated potential speedup: 0.980 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(700,13)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(708,13)
      remark #15389: vectorization support: reference s has unaligned access   [ mg.f(714,15) ]
      remark #15389: vectorization support: reference r has unaligned access   [ mg.f(716,33) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(715,30) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(716,33) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(716,49) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(712,20) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(712,40) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(713,20) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(713,40) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(i1-1)>, stride is 2   [ mg.f(716,20) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(i1+1)>, stride is 2   [ mg.f(716,20) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(710,20) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(710,40) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(711,20) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <r>, stride is 2   [ mg.f(711,40) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <y1(i1-1)>, stride is 2   [ mg.f(717,20) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <y1(i1+1)>, stride is 2   [ mg.f(717,20) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.075
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 15 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 52 
      remark #15477: vector cost: 53.000 
      remark #15478: estimated potential speedup: 0.980 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(708,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mg.f(953,7) inlined into mg.f(730,15)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(730,15)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(730,15)
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(957,22) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.316
      remark #15355: vectorization support: %s is double type reduction   [ mg.f(951,7) ]
      remark #15355: vectorization support: %.2.52_2fast_red_auto.142 is double type reduction   [ mg.f(951,7) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 21 
      remark #15477: vector cost: 19.000 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(730,15)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: NORM2U3

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(953,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(955,13)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(955,13)
      remark #15388: vectorization support: reference r has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference r has aligned access   [ mg.f(957,22) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.305
      remark #15355: vectorization support: %s is double type reduction   [ mg.f(951,7) ]
      remark #15355: vectorization support: %.2.53_2fast_red_auto.55 is double type reduction   [ mg.f(951,7) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 24 
      remark #15477: vector cost: 20.500 
      remark #15478: estimated potential speedup: 1.150 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(955,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: SETUP

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(384,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between k (385:10) and k (387:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between k (387:10) and k (385:10)

   LOOP BEGIN at mg.f(385,10)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ng(ax,k) (386:13) and ng(ax,k+1) (386:13)
   LOOP END

   LOOP BEGIN at mg.f(385,10)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at mg.f(390,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <nx_(k)>, stride is -1   [ mg.f(391,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ng(1,k)>, stride is -3   [ mg.f(391,10) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <ny_(k)>, stride is -1   [ mg.f(392,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ng(2,k)>, stride is -3   [ mg.f(392,10) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <nz_(k)>, stride is -1   [ mg.f(393,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ng(3,k)>, stride is -3   [ mg.f(393,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 3 
   remark #15453: unmasked strided stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 54.750 
   remark #15478: estimated potential speedup: 0.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(390,7)
<Remainder>
LOOP END

LOOP BEGIN at mg.f(396,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <mi(ax,k)>, stride is -3   [ mg.f(398,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ng(ax,k)>, stride is -3   [ mg.f(398,13) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <mi(ax,k)>, stride is -3   [ mg.f(398,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ng(ax,k)>, stride is -3   [ mg.f(398,13) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <mi(ax,k)>, stride is -3   [ mg.f(398,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ng(ax,k)>, stride is -3   [ mg.f(398,13) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <m1(k)>, stride is -1   [ mg.f(401,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <mi(1,k)>, stride is -3   [ mg.f(401,10) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <m2(k)>, stride is -1   [ mg.f(402,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <mi(2,k)>, stride is -3   [ mg.f(402,10) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <m3(k)>, stride is -1   [ mg.f(403,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <mi(3,k)>, stride is -3   [ mg.f(403,10) ]
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 6 
   remark #15453: unmasked strided stores: 6 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 25 
   remark #15477: vector cost: 117.750 
   remark #15478: estimated potential speedup: 0.250 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at mg.f(397,10)
   LOOP END
LOOP END

LOOP BEGIN at mg.f(420,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between ir(j) (421:10) and ir(j+1) (421:10)
LOOP END

LOOP BEGIN at mg.f(420,7)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: ZRAN3

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(1322,14) inlined into mg.f(1083,12)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at mg.f(1322,14) inlined into mg.f(1084,12)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at mg.f(1322,14) inlined into mg.f(1090,12)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at mg.f(1101,7)
   remark #15382: vectorization support: call to function randlc_ cannot be vectorized   [ mg.f(1103,19) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between x0 (1102:10) and x0 (1103:19)
   remark #15346: vector dependence: assumed FLOW dependence between x0 (1103:19) and x0 (1102:10)
LOOP END

LOOP BEGIN at mg.f(1249,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <jg(3,i,0)>, stride is -4
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <jg(2,i,0)>, stride is -4
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <jg(1,i,0)>, stride is -4
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <z(jg(1,i,0),jg(2,i,0),jg(3,i,0))>, 64-bit indexed, part of index is read from memory   [ mg.f(1249,10) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 5
   remark #15309: vectorization support: normalized vectorization overhead 0.028
   remark #15452: unmasked strided loads: 3 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 29.000 
   remark #15478: estimated potential speedup: 0.330 
   remark #15487: type converts: 3 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(1251,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <jg(3,i,1)>, stride is -4   [ mg.f(1252,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <jg(2,i,1)>, stride is -4   [ mg.f(1252,10) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <jg(1,i,1)>, stride is -4   [ mg.f(1252,10) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <z(jg(1,i,1),jg(2,i,1),jg(3,i,1))>, 64-bit indexed, part of index is read from memory   [ mg.f(1252,10) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 5
   remark #15309: vectorization support: normalized vectorization overhead 0.028
   remark #15452: unmasked strided loads: 3 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 10 
   remark #15477: vector cost: 29.000 
   remark #15478: estimated potential speedup: 0.330 
   remark #15487: type converts: 3 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(1424,7) inlined into mg.f(1086,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(1426,13) inlined into mg.f(1086,12)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mg.f(1426,13) inlined into mg.f(1086,12)
         remark #15389: vectorization support: reference z has unaligned access   [ mg.f(1427,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mg.f(1426,13) inlined into mg.f(1086,12)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mg.f(1111,7)
   remark #15382: vectorization support: call to function vranlc_ cannot be vectorized   [ mg.f(1115,18) ]
   remark #15382: vectorization support: call to function randlc_ cannot be vectorized   [ mg.f(1116,22) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between x1 (1112:10) and x1 (1116:22)
   remark #15346: vector dependence: assumed OUTPUT dependence between x1 (1116:22) and x1 (1112:10)

   LOOP BEGIN at mg.f(1113,10)
      remark #15382: vectorization support: call to function vranlc_ cannot be vectorized   [ mg.f(1115,18) ]
      remark #15382: vectorization support: call to function randlc_ cannot be vectorized   [ mg.f(1116,22) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between xx (1114:13) and xx (1115:18)
      remark #15346: vector dependence: assumed OUTPUT dependence between xx (1115:18) and xx (1114:13)
   LOOP END
LOOP END

LOOP BEGIN at mg.f(1131,7)
<Distributed chunk1>
   remark #15388: vectorization support: reference ten(i,1) has aligned access   [ mg.f(1132,10) ]
   remark #15388: vectorization support: reference ten(i,0) has aligned access   [ mg.f(1136,10) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 5
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 2.330 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(1131,7)
<Distributed chunk2>
   remark #15389: vectorization support: reference j1(i,1) has unaligned access   [ mg.f(1133,10) ]
   remark #15389: vectorization support: reference j2(i,1) has unaligned access   [ mg.f(1134,10) ]
   remark #15389: vectorization support: reference j3(i,1) has unaligned access   [ mg.f(1135,10) ]
   remark #15388: vectorization support: reference j1(i,0) has aligned access   [ mg.f(1137,10) ]
   remark #15388: vectorization support: reference j2(i,0) has aligned access   [ mg.f(1138,10) ]
   remark #15388: vectorization support: reference j3(i,0) has aligned access   [ mg.f(1139,10) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 3 
   remark #15451: unmasked unaligned unit stride stores: 3 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 6.750 
   remark #15478: estimated potential speedup: 1.620 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at mg.f(1131,7)
<Remainder loop for vectorization, Distributed chunk2>
LOOP END

LOOP BEGIN at mg.f(1143,7)
   remark #15382: vectorization support: call to function BUBBLE..0 cannot be vectorized   [ mg.f(1151,24) ]
   remark #15382: vectorization support: call to function BUBBLE..1 cannot be vectorized   [ mg.f(1158,24) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between ten(1,1) (1147:19) and ten (1158:24)
   remark #15346: vector dependence: assumed OUTPUT dependence between ten (1158:24) and ten(1,1) (1147:19)

   LOOP BEGIN at mg.f(1145,13)
      remark #15382: vectorization support: call to function BUBBLE..0 cannot be vectorized   [ mg.f(1151,24) ]
      remark #15382: vectorization support: call to function BUBBLE..1 cannot be vectorized   [ mg.f(1158,24) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between ten(1,1) (1147:19) and ten (1158:24)
      remark #15346: vector dependence: assumed OUTPUT dependence between ten (1158:24) and ten(1,1) (1147:19)
   LOOP END

   LOOP BEGIN at mg.f(1145,13)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at mg.f(1174,7)
   remark #15382: vectorization support: call to function __kmpc_master cannot be vectorized   [ mg.f(1180,7) ]
   remark #15382: vectorization support: call to function __kmpc_end_master cannot be vectorized   [ mg.f(1180,7) ]
   remark #15382: vectorization support: call to function __kmpc_dispatch_init_4 cannot be vectorized   [ mg.f(1185,7) ]
   remark #15382: vectorization support: call to function __kmpc_dispatch_next_4 cannot be vectorized   [ mg.f(1185,7) ]
   remark #15382: vectorization support: call to function __kmpc_ordered cannot be vectorized   [ mg.f(1187,7) ]
   remark #15382: vectorization support: call to function __memory_barrier cannot be vectorized   [ mg.f(1187,7) ]
   remark #15382: vectorization support: call to function __memory_barrier cannot be vectorized   [ mg.f(1196,7) ]
   remark #15382: vectorization support: call to function __kmpc_end_ordered cannot be vectorized   [ mg.f(1196,7) ]
   remark #15382: vectorization support: call to function __kmpc_dispatch_fini_4 cannot be vectorized   [ mg.f(1185,7) ]
   remark #15382: vectorization support: call to function __kmpc_barrier cannot be vectorized   [ mg.f(1197,10) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at mg.f(1185,7)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

      LOOP BEGIN at mg.f(1185,7)
         remark #15382: vectorization support: call to function __kmpc_ordered cannot be vectorized   [ mg.f(1187,7) ]
         remark #15382: vectorization support: call to function __memory_barrier cannot be vectorized   [ mg.f(1187,7) ]
         remark #15382: vectorization support: call to function __memory_barrier cannot be vectorized   [ mg.f(1196,7) ]
         remark #15382: vectorization support: call to function __kmpc_end_ordered cannot be vectorized   [ mg.f(1196,7) ]
         remark #15382: vectorization support: call to function __kmpc_dispatch_fini_4 cannot be vectorized
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mg.f(1239,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(1241,13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mg.f(1241,13)
         remark #15389: vectorization support: reference z has unaligned access   [ mg.f(1242,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mg.f(1241,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: BUBBLE..0

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(1354,28)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at mg.f(1380,28)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: BUBBLE..1

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(1354,28)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at mg.f(1380,28)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: ZERO3

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(1424,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(1426,13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mg.f(1426,13)
         remark #15389: vectorization support: reference z has unaligned access   [ mg.f(1427,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mg.f(1426,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: SHOWALL

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(1285,7)
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mg.f(1287,13) ]
   remark #15382: vectorization support: call to function for_write_seq_lis cannot be vectorized   [ mg.f(1289,10) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1289:10)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (1289:10) and at (1287:13)

   LOOP BEGIN at mg.f(1286,10)
      remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ mg.f(1287,13) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1287:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between at (1287:13) and at (1287:13)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: REP_NRM

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(953,7) inlined into mg.f(991,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(991,12)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(991,12)
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(956,31) ]
      remark #15388: vectorization support: reference u has aligned access   [ mg.f(957,22) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.316
      remark #15355: vectorization support: %s is double type reduction   [ mg.f(951,7) ]
      remark #15355: vectorization support: %.2.60_2fast_red_auto.73 is double type reduction   [ mg.f(951,7) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 21 
      remark #15477: vector cost: 19.000 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mg.f(955,13) inlined into mg.f(991,12)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: BUBBLE

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(1354,28)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at mg.f(1380,28)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: POWER

    Report from: Vector optimizations [vec]


LOOP BEGIN at mg.f(1322,14)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END
===========================================================================
