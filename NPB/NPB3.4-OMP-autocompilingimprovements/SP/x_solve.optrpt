Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.1 Build 20201112_000000

Compiler options: -c -O4 -fopenmp -qopt-report=5 -qopt-report-phase=vec

Begin optimization report for: X_SOLVE

    Report from: Vector optimizations [vec]


LOOP BEGIN at x_solve.f(32,8)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at x_solve.f(44,14)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at x_solve.f(44,14)
      remark #15389: vectorization support: reference rho_i_(i,j,k) has unaligned access   [ x_solve.f(45,28) ]
      remark #15388: vectorization support: reference cv(i) has aligned access   [ x_solve.f(46,17) ]
      remark #15389: vectorization support: reference us_(i,j,k) has unaligned access   [ x_solve.f(46,17) ]
      remark #15388: vectorization support: reference rhov(i) has aligned access   [ x_solve.f(47,17) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.544
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 42 
      remark #15477: vector cost: 34.000 
      remark #15478: estimated potential speedup: 1.220 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at x_solve.f(44,14)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at x_solve.f(44,14)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at x_solve.f(53,14)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at x_solve.f(53,14)
      remark #15389: vectorization support: reference rhov(i) has unaligned access   [ x_solve.f(56,17) ]
      remark #15388: vectorization support: reference cv(i-1) has aligned access   [ x_solve.f(55,17) ]
      remark #15389: vectorization support: reference rhov(i-1) has unaligned access   [ x_solve.f(55,28) ]
      remark #15388: vectorization support: reference cv(i+1) has aligned access   [ x_solve.f(57,17) ]
      remark #15389: vectorization support: reference rhov(i+1) has unaligned access   [ x_solve.f(57,35) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhs(1,i)>, stride is 5   [ x_solve.f(54,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhs(5,i)>, stride is 5   [ x_solve.f(58,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhs(3,i)>, stride is 5   [ x_solve.f(56,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhs(2,i)>, stride is 5   [ x_solve.f(55,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhs(4,i)>, stride is 5   [ x_solve.f(57,17) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.527
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15453: unmasked strided stores: 5 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 40 
      remark #15477: vector cost: 27.500 
      remark #15478: estimated potential speedup: 1.430 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at x_solve.f(53,14)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at x_solve.f(75,14)
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhs(1,i)>, stride is 5   [ x_solve.f(76,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(1,i)>, stride is 5   [ x_solve.f(76,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhs(2,i)>, stride is 5   [ x_solve.f(77,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(2,i)>, stride is 5   [ x_solve.f(77,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhs(3,i)>, stride is 5   [ x_solve.f(78,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(3,i)>, stride is 5   [ x_solve.f(78,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhs(4,i)>, stride is 5   [ x_solve.f(79,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(4,i)>, stride is 5   [ x_solve.f(79,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhs(5,i)>, stride is 5   [ x_solve.f(80,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(5,i)>, stride is 5   [ x_solve.f(80,17) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.200
      remark #15300: LOOP WAS VECTORIZED
      remark #15452: unmasked strided loads: 5 
      remark #15453: unmasked strided stores: 5 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 31 
      remark #15477: vector cost: 25.000 
      remark #15478: estimated potential speedup: 1.230 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at x_solve.f(75,14)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at x_solve.f(97,14)
      remark #15389: vectorization support: reference speed_(i-1,j,k) has unaligned access   [ x_solve.f(100,43) ]
      remark #15389: vectorization support: reference speed_(i+1,j,k) has unaligned access   [ x_solve.f(103,43) ]
      remark #15389: vectorization support: reference speed_(i-1,j,k) has unaligned access   [ x_solve.f(107,43) ]
      remark #15389: vectorization support: reference speed_(i+1,j,k) has unaligned access   [ x_solve.f(110,43) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhsp(1,i)>, stride is 5   [ x_solve.f(98,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(1,i)>, stride is 5   [ x_solve.f(98,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhsp(3,i)>, stride is 5   [ x_solve.f(101,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(3,i)>, stride is 5   [ x_solve.f(101,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhsp(5,i)>, stride is 5   [ x_solve.f(104,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(5,i)>, stride is 5   [ x_solve.f(104,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhsm(1,i)>, stride is 5   [ x_solve.f(105,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(1,i)>, stride is 5   [ x_solve.f(105,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhsm(3,i)>, stride is 5   [ x_solve.f(108,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(3,i)>, stride is 5   [ x_solve.f(108,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhsm(5,i)>, stride is 5   [ x_solve.f(111,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(5,i)>, stride is 5   [ x_solve.f(111,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhsp(2,i)>, stride is 5   [ x_solve.f(99,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(2,i)>, stride is 5   [ x_solve.f(99,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhsp(4,i)>, stride is 5   [ x_solve.f(102,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(4,i)>, stride is 5   [ x_solve.f(102,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhsm(2,i)>, stride is 5   [ x_solve.f(106,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(2,i)>, stride is 5   [ x_solve.f(106,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <lhsm(4,i)>, stride is 5   [ x_solve.f(109,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <lhs(4,i)>, stride is 5   [ x_solve.f(109,17) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.099
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 2 
      remark #15452: unmasked strided loads: 10 
      remark #15453: unmasked strided stores: 10 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 57 
      remark #15477: vector cost: 71.000 
      remark #15478: estimated potential speedup: 0.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at x_solve.f(97,14)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at x_solve.f(129,40)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between lhs(4,i) (126:17) and lhs(4,i+1) (133:17)
      remark #15346: vector dependence: assumed OUTPUT dependence between lhs(4,i+1) (133:17) and lhs(4,i) (126:17)

      LOOP BEGIN at x_solve.f(128,17)
      LOOP END

      LOOP BEGIN at x_solve.f(135,17)
      LOOP END

      LOOP BEGIN at x_solve.f(143,17)
      LOOP END
   LOOP END

   LOOP BEGIN at x_solve.f(160,14)
   LOOP END

   LOOP BEGIN at x_solve.f(167,14)
   LOOP END

   LOOP BEGIN at x_solve.f(175,14)
   LOOP END

   LOOP BEGIN at x_solve.f(183,14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between lhsm(4,i) (205:17) and lhsm(4,i+1) (210:17)
      remark #15346: vector dependence: assumed OUTPUT dependence between lhsm(4,i+1) (210:17) and lhsm(4,i) (205:17)
   LOOP END

   LOOP BEGIN at x_solve.f(263,14)
   LOOP END

   LOOP BEGIN at x_solve.f(276,14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between rhs_(m,i,j,k) (280:20) and rhs_(m,i+1,j,k) (280:20)
      remark #15346: vector dependence: assumed ANTI dependence between rhs_(m,i+1,j,k) (280:20) and rhs_(m,i,j,k) (280:20)
      remark #15346: vector dependence: assumed FLOW dependence between rhs_(m,i,j,k) (280:20) and rhs_(m,i+2,j,k) (280:20)
      remark #15346: vector dependence: assumed ANTI dependence between rhs_(m,i+2,j,k) (280:20) and rhs_(m,i,j,k) (280:20)

      LOOP BEGIN at x_solve.f(279,17)
      LOOP END
   LOOP END
LOOP END
===========================================================================
