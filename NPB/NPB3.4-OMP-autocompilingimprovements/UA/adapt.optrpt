Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.1 Build 20201112_000000

Compiler options: -c -O4 -fopenmp -qopt-report=5 -qopt-report-phase=vec

Begin optimization report for: ADAPTATION

    Report from: Vector optimizations [vec]


LOOP BEGIN at adapt.f(34,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at adapt.f(36,12)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(70,10)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at adapt.f(763,7) inlined into adapt.f(32,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between if_refine (769:16) and if_refine (769:32)
   remark #15346: vector dependence: assumed FLOW dependence between if_refine (769:32) and if_refine (769:16)
LOOP END

LOOP BEGIN at adapt.f(798,7) inlined into adapt.f(39,16)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at adapt.f(802,11) inlined into adapt.f(39,16)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at adapt.f(816,15) inlined into adapt.f(39,16)
         remark #15382: vectorization support: call to function ifsame_ cannot be vectorized   [ adapt.f(639,11) ]
         remark #15382: vectorization support: call to function ifsame_ cannot be vectorized   [ adapt.f(640,11) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between nntemp (820:21) and nntemp (640:11)
         remark #15346: vector dependence: assumed OUTPUT dependence between nntemp (640:11) and nntemp (820:21)
      LOOP END

      LOOP BEGIN at adapt.f(831,15) inlined into adapt.f(39,16)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between ich_(nntemp) (835:21) and ich_(iel) (836:21)
         remark #15346: vector dependence: assumed OUTPUT dependence between ich_(iel) (836:21) and ich_(nntemp) (835:21)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(763,7) inlined into adapt.f(32,12)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between if_refine (769:16) and if_refine (769:32)
   remark #15346: vector dependence: assumed FLOW dependence between if_refine (769:32) and if_refine (769:16)
LOOP END

LOOP BEGIN at adapt.f(56,7)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at adapt.f(56,7)
      remark #15389: vectorization support: reference skip_(iel) has unaligned access   [ adapt.f(58,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.230 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(56,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(724,7) inlined into adapt.f(68,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at adapt.f(729,13) inlined into adapt.f(68,12)
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 3
      remark #15309: vectorization support: normalized vectorization overhead 0.212
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 5.500 
      remark #15478: estimated potential speedup: 2.700 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(724,7) inlined into adapt.f(68,12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at adapt.f(729,13) inlined into adapt.f(68,12)
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 3
      remark #15309: vectorization support: normalized vectorization overhead 0.212
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 5.500 
      remark #15478: estimated potential speedup: 2.700 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(91,7)
   remark #15389: vectorization support: reference mt_to_id_(miel) has unaligned access   [ adapt.f(93,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <id_to_mt_(mt_to_id_(miel))>, part of index is read from memory   [ adapt.f(94,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.065
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 11.500 
   remark #15478: estimated potential speedup: 0.340 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at adapt.f(91,7)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: DO_REFINE

    Report from: Vector optimizations [vec]


LOOP BEGIN at adapt.f(302,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at adapt.f(302,7)
   remark #15389: vectorization support: reference mt_to_id_old_(miel) has unaligned access   [ adapt.f(304,9) ]
   remark #15388: vectorization support: reference mt_to_id_(miel) has aligned access   [ adapt.f(304,9) ]
   remark #15389: vectorization support: reference action_(miel) has unaligned access   [ adapt.f(306,9) ]
   remark #15388: vectorization support: reference front_(miel) has aligned access   [ adapt.f(308,11) ]
   remark #15388: vectorization support: reference mt_to_id_(miel) has aligned access   [ adapt.f(305,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ich_(mt_to_id_old_(miel))>, part of index is read from memory   [ adapt.f(307,12) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 30 
   remark #15477: vector cost: 17.250 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at adapt.f(302,7)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at adapt.f(302,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at adapt.f(323,7)
   remark #15389: vectorization support: reference front_(miel) has unaligned access   [ adapt.f(327,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ich_(mt_to_id_old_(miel))>, part of index is read from memory   [ adapt.f(326,12) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <action_(front_(miel))>, masked, part of index is read from memory   [ adapt.f(327,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.014
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15456: masked unaligned unit stride loads: 1 
   remark #15459: masked indexed (or scatter) stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 51.750 
   remark #15478: estimated potential speedup: 0.400 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at adapt.f(323,7)
<Remainder>
LOOP END

LOOP BEGIN at adapt.f(335,7)
   remark #15389: vectorization support: reference mt_to_id_old_(miel) has unaligned access   [ adapt.f(337,9) ]
   remark #15389: vectorization support: reference front_(miel) has unaligned access   [ adapt.f(339,18) ]
   remark #15389: vectorization support: reference front_(miel) has unaligned access   [ adapt.f(342,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ich_(iel)>, part of index is read from memory   [ adapt.f(338,12) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <mt_to_id_(mielnew)>, part of index is conditional   [ adapt.f(346,9) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <ref_front_id_(iel)>, part of index is read from memory   [ adapt.f(347,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.051
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 30 
   remark #15477: vector cost: 44.000 
   remark #15478: estimated potential speedup: 0.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at adapt.f(335,7)
<Remainder>
LOOP END

LOOP BEGIN at adapt.f(366,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at adapt.f(399,9)
      remark #15382: vectorization support: call to function nr_init_ cannot be vectorized   [ adapt.f(402,16) ]
      remark #15382: vectorization support: call to function nr_init_ cannot be vectorized   [ adapt.f(403,16) ]
      remark #15382: vectorization support: call to function nr_init_ cannot be vectorized   [ adapt.f(404,16) ]
      remark #15382: vectorization support: call to function r_init_ cannot be vectorized   [ adapt.f(405,16) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between tree_(nelt+j) (401:11) and ijel_(1,1,nelt+j) (404:16)
      remark #15346: vector dependence: assumed OUTPUT dependence between ijel_(1,1,nelt+j) (404:16) and tree_(nelt+j) (401:11)
   LOOP END

   LOOP BEGIN at adapt.f(411,9)
      remark #15389: vectorization support: reference tree_(nelt+i) has unaligned access   [ adapt.f(412,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 3
      remark #15309: vectorization support: normalized vectorization overhead 0.021
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 40.000 
      remark #15478: estimated potential speedup: 0.110 
      remark #15482: vectorized math library calls: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(426,11)
      remark #15389: vectorization support: reference xc_(i,nelt+j) has unaligned access   [ adapt.f(434,13) ]
      remark #15389: vectorization support: reference xc_(i,nelt+j) has unaligned access   [ adapt.f(434,13) ]
      remark #15389: vectorization support: reference xc_(i,nelt+j) has unaligned access   [ adapt.f(434,13) ]
      remark #15389: vectorization support: reference xc_(i,nelt+j) has unaligned access   [ adapt.f(427,13) ]
      remark #15389: vectorization support: reference xc_(i,nelt+j) has unaligned access   [ adapt.f(427,13) ]
      remark #15389: vectorization support: reference xc_(i,nelt+j) has unaligned access   [ adapt.f(427,13) ]
      remark #15389: vectorization support: reference xc_(i,nelt+j) has unaligned access   [ adapt.f(427,13) ]
      remark #15389: vectorization support: reference xc_(i,iel) has unaligned access   [ adapt.f(440,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i+1,nelt+j)>, stride is 2   [ adapt.f(435,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i,nelt+j)>, stride is 2   [ adapt.f(434,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i+1,nelt+j)>, stride is 2   [ adapt.f(435,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i,nelt+j)>, stride is 2   [ adapt.f(434,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i+1,nelt+j)>, stride is 2   [ adapt.f(435,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i,nelt+j)>, stride is 2   [ adapt.f(434,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i+1,nelt+j)>, stride is 2   [ adapt.f(428,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i,nelt+j)>, stride is 2   [ adapt.f(427,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i+1,nelt+j)>, stride is 2   [ adapt.f(428,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i,nelt+j)>, stride is 2   [ adapt.f(427,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i+1,nelt+j)>, stride is 2   [ adapt.f(428,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i,nelt+j)>, stride is 2   [ adapt.f(427,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i+1,nelt+j)>, stride is 2   [ adapt.f(428,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i,nelt+j)>, stride is 2   [ adapt.f(427,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i+1,iel)>, stride is 2   [ adapt.f(441,11) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i,iel)>, stride is 2   [ adapt.f(440,11) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.583
      remark #15453: unmasked strided stores: 16 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 58 
      remark #15477: vector cost: 48.000 
      remark #15478: estimated potential speedup: 0.930 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(433,11)
   LOOP END

   LOOP BEGIN at adapt.f(439,9)
   LOOP END

   LOOP BEGIN at adapt.f(445,11)
      remark #15389: vectorization support: reference yc_(i,nelt+5) has unaligned access   [ adapt.f(447,11) ]
      remark #15389: vectorization support: reference yc_(i+4,nelt+5) has unaligned access   [ adapt.f(450,11) ]
      remark #15389: vectorization support: reference yc_(i,nelt+5) has unaligned access   [ adapt.f(455,11) ]
      remark #15389: vectorization support: reference yc_(i+4,nelt+5) has unaligned access   [ adapt.f(458,11) ]
      remark #15389: vectorization support: reference yc_(i,nelt+4) has unaligned access   [ adapt.f(446,11) ]
      remark #15389: vectorization support: reference yc_(i+4,nelt+4) has unaligned access   [ adapt.f(449,11) ]
      remark #15389: vectorization support: reference yc_(i,nelt+4) has unaligned access   [ adapt.f(454,11) ]
      remark #15389: vectorization support: reference yc_(i+4,nelt+4) has unaligned access   [ adapt.f(457,11) ]
      remark #15389: vectorization support: reference yc_(i,nelt+1) has unaligned access
      remark #15389: vectorization support: reference yc_(i+4,nelt+1) has unaligned access   [ adapt.f(448,11) ]
      remark #15389: vectorization support: reference yc_(i,nelt+1) has unaligned access   [ adapt.f(453,11) ]
      remark #15389: vectorization support: reference yc_(i+4,nelt+1) has unaligned access   [ adapt.f(456,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15451: unmasked unaligned unit stride stores: 12 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 43 
      remark #15477: vector cost: 30.000 
      remark #15478: estimated potential speedup: 0.710 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(452,9)
   LOOP END

   LOOP BEGIN at adapt.f(460,9)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <yc_(i,nelt+j)>, stride is unknown to compiler   [ adapt.f(462,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <yc_(i,nelt+j+4)>, stride is unknown to compiler   [ adapt.f(463,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <yc_(i+4,nelt+j)>, stride is unknown to compiler   [ adapt.f(464,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <yc_(i+4,nelt+j+4)>, stride is unknown to compiler   [ adapt.f(465,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <yc_(i,nelt+j)>, stride is unknown to compiler   [ adapt.f(468,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <yc_(i,nelt+j+4)>, stride is unknown to compiler   [ adapt.f(469,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <yc_(i+4,nelt+j)>, stride is unknown to compiler   [ adapt.f(470,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <yc_(i+4,nelt+j+4)>, stride is unknown to compiler   [ adapt.f(471,13) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.327
      remark #15453: unmasked strided stores: 8 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 29 
      remark #15477: vector cost: 24.500 
      remark #15478: estimated potential speedup: 0.890 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at adapt.f(461,11)
         remark #15389: vectorization support: reference yc_(i,nelt+j) has unaligned access   [ adapt.f(462,13) ]
         remark #15389: vectorization support: reference yc_(i,nelt+j+4) has unaligned access   [ adapt.f(463,13) ]
         remark #15389: vectorization support: reference yc_(i+4,nelt+j) has unaligned access   [ adapt.f(464,13) ]
         remark #15389: vectorization support: reference yc_(i+4,nelt+j+4) has unaligned access   [ adapt.f(465,13) ]
         remark #15389: vectorization support: reference yc_(i,nelt+j) has unaligned access   [ adapt.f(468,13) ]
         remark #15389: vectorization support: reference yc_(i,nelt+j+4) has unaligned access   [ adapt.f(469,13) ]
         remark #15389: vectorization support: reference yc_(i+4,nelt+j) has unaligned access   [ adapt.f(470,13) ]
         remark #15389: vectorization support: reference yc_(i+4,nelt+j+4) has unaligned access   [ adapt.f(471,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15451: unmasked unaligned unit stride stores: 8 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 29 
         remark #15477: vector cost: 20.000 
         remark #15478: estimated potential speedup: 0.720 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(467,11)
      LOOP END

      LOOP BEGIN at adapt.f(461,11)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(475,9)
      remark #15389: vectorization support: reference yc_(i,iel) has unaligned access   [ adapt.f(476,11) ]
      remark #15389: vectorization support: reference yc_(i+4,iel) has unaligned access   [ adapt.f(477,11) ]
      remark #15389: vectorization support: reference yc_(i,iel) has unaligned access   [ adapt.f(480,11) ]
      remark #15389: vectorization support: reference yc_(i+4,iel) has unaligned access   [ adapt.f(481,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15451: unmasked unaligned unit stride stores: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 14 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.700 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(479,9)
   LOOP END

   LOOP BEGIN at adapt.f(486,13)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <zc_(i,nelt+j)>, stride is unknown to compiler
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <zc_(i+4,nelt+j)>, stride is unknown to compiler   [ adapt.f(487,13) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.308
      remark #15453: unmasked strided stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 6.500 
      remark #15478: estimated potential speedup: 0.870 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at adapt.f(485,11)
         remark #15389: vectorization support: reference zc_(i,nelt+j) has unaligned access   [ adapt.f(486,13) ]
         remark #15389: vectorization support: reference zc_(i+4,nelt+j) has unaligned access   [ adapt.f(487,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.500
         remark #15451: unmasked unaligned unit stride stores: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 7 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 0.930 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(485,11)
      LOOP END

      LOOP BEGIN at adapt.f(485,11)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(490,9)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <zc_(i,nelt+j)>, stride is unknown to compiler   [ adapt.f(492,13) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <zc_(i+4,nelt+j)>, stride is unknown to compiler   [ adapt.f(493,13) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.308
      remark #15453: unmasked strided stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 6.500 
      remark #15478: estimated potential speedup: 0.930 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at adapt.f(491,11)
         remark #15389: vectorization support: reference zc_(i,nelt+j) has unaligned access   [ adapt.f(492,13) ]
         remark #15389: vectorization support: reference zc_(i+4,nelt+j) has unaligned access   [ adapt.f(493,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.500
         remark #15451: unmasked unaligned unit stride stores: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 7 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 0.930 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(491,11)
      LOOP END

      LOOP BEGIN at adapt.f(491,11)
      LOOP END

      LOOP BEGIN at adapt.f(491,11)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(496,9)
      remark #15389: vectorization support: reference zc_(i,iel) has unaligned access   [ adapt.f(497,11) ]
      remark #15389: vectorization support: reference zc_(i+4,iel) has unaligned access   [ adapt.f(498,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 7 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.930 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(530,15)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at adapt.f(509,11)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at adapt.f(516,13)
            remark #15388: vectorization support: reference le(k) has aligned access   [ adapt.f(517,15) ]
            remark #15389: vectorization support: reference le_arr(k,facedir,ndir) has unaligned access   [ adapt.f(517,15) ]
            remark #15388: vectorization support: reference ne(k) has aligned access   [ adapt.f(518,15) ]
            remark #15389: vectorization support: reference le_arr(k,facedir+1,ndir) has unaligned access   [ adapt.f(518,15) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 4
            remark #15427: loop was completely unrolled
            remark #15309: vectorization support: normalized vectorization overhead 0.857
            remark #15300: LOOP WAS VECTORIZED
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 2 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 9 
            remark #15477: vector cost: 3.500 
            remark #15478: estimated potential speedup: 1.380 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at adapt.f(527,13)
            remark #15388: vectorization support: reference le(k) has aligned access   [ adapt.f(528,15) ]
            remark #15388: vectorization support: reference le(k) has aligned access   [ adapt.f(529,15) ]
            remark #15388: vectorization support: reference ne(k) has aligned access   [ adapt.f(529,15) ]
            remark #15388: vectorization support: reference le(k) has aligned access   [ adapt.f(530,15) ]
            remark #15388: vectorization support: reference le(k) has aligned access   [ adapt.f(531,15) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15329: vectorization support: irregularly indexed store was emulated for the variable <cbc_(i,le(k))>, part of index is read from memory   [ adapt.f(528,15) ]
            remark #15329: vectorization support: irregularly indexed store was emulated for the variable <sje_(1,1,i,le(k))>, 64-bit indexed, part of index is read from memory   [ adapt.f(529,15) ]
            remark #15329: vectorization support: irregularly indexed store was emulated for the variable <ijel_(1,i,le(k))>, 64-bit indexed, part of index is read from memory   [ adapt.f(530,15) ]
            remark #15329: vectorization support: irregularly indexed store was emulated for the variable <ijel_(2,i,le(k))>, 64-bit indexed, part of index is read from memory   [ adapt.f(531,15) ]
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.132
            remark #15450: unmasked unaligned unit stride loads: 5 
            remark #15463: unmasked indexed (or scatter) stores: 4 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 20 
            remark #15477: vector cost: 75.500 
            remark #15478: estimated potential speedup: 0.240 
            remark #15487: type converts: 3 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at adapt.f(570,17)
            remark #15388: vectorization support: reference ne(k) has aligned access   [ adapt.f(571,19) ]
            remark #15388: vectorization support: reference ne(k) has aligned access   [ adapt.f(575,19) ]
            remark #15388: vectorization support: reference le_arr(k,facedir,ndir) has aligned access   [ adapt.f(572,19) ]
            remark #15388: vectorization support: reference ne(k) has aligned access   [ adapt.f(574,19) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15329: vectorization support: irregularly indexed store was emulated for the variable <cbc_(i,ne(k))>, part of index is read from memory   [ adapt.f(571,19) ]
            remark #15329: vectorization support: irregularly indexed store was emulated for the variable <ijel_(1,i,ne(k))>, 64-bit indexed, part of index is read from memory   [ adapt.f(575,19) ]
            remark #15329: vectorization support: irregularly indexed store was emulated for the variable <sje_(1,1,i,ne(k))>, 64-bit indexed, part of index is read from memory   [ adapt.f(574,19) ]
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.206
            remark #15450: unmasked unaligned unit stride loads: 4 
            remark #15463: unmasked indexed (or scatter) stores: 3 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 34 
            remark #15477: vector cost: 65.500 
            remark #15478: estimated potential speedup: 0.470 
            remark #15487: type converts: 2 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at adapt.f(603,15)
            remark #15388: vectorization support: reference ne(k) has aligned access   [ adapt.f(604,17) ]
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15329: vectorization support: irregularly indexed store was emulated for the variable <cbc_(i,ne(k))>, part of index is read from memory   [ adapt.f(604,17) ]
            remark #15305: vectorization support: vector length 2
            remark #15427: loop was completely unrolled
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.143
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15463: unmasked indexed (or scatter) stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 5 
            remark #15477: vector cost: 14.000 
            remark #15478: estimated potential speedup: 0.310 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at adapt.f(527,13)
         LOOP END

         LOOP BEGIN at adapt.f(570,17)
         LOOP END

         LOOP BEGIN at adapt.f(603,15)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(921,7) inlined into adapt.f(612,14)
   <Distributed chunk1>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at adapt.f(922,9) inlined into adapt.f(612,14)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at adapt.f(924,13) inlined into adapt.f(612,14)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at adapt.f(924,13) inlined into adapt.f(612,14)
            remark #15388: vectorization support: reference yone(ii,jj,i,1) has aligned access   [ adapt.f(925,15) ]
            remark #15388: vectorization support: reference yone(ii,jj,i,1) has aligned access   [ adapt.f(925,15) ]
            remark #15389: vectorization support: reference ixmc1(ii,kk) has unaligned access   [ adapt.f(925,15) ]
            remark #15389: vectorization support: reference yone(ii,jj,i,2) has unaligned access   [ adapt.f(926,15) ]
            remark #15389: vectorization support: reference yone(ii,jj,i,2) has unaligned access   [ adapt.f(926,15) ]
            remark #15389: vectorization support: reference ixmc2(ii,kk) has unaligned access   [ adapt.f(926,15) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.425
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 18 
            remark #15477: vector cost: 10.000 
            remark #15478: estimated potential speedup: 1.130 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at adapt.f(924,13) inlined into adapt.f(612,14)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(932,11) inlined into adapt.f(612,14)
   <Distributed chunk2>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at adapt.f(921,7) inlined into adapt.f(612,14)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at adapt.f(931,9) inlined into adapt.f(612,14)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at adapt.f(933,13) inlined into adapt.f(612,14)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at adapt.f(933,13) inlined into adapt.f(612,14)
               remark #15388: vectorization support: reference ytwo(ii,i,jj,1) has aligned access   [ adapt.f(934,15) ]
               remark #15388: vectorization support: reference ytwo(ii,i,jj,1) has aligned access   [ adapt.f(934,15) ]
               remark #15388: vectorization support: reference yone(ii,kk,i,1) has aligned access   [ adapt.f(934,15) ]
               remark #15389: vectorization support: reference ytwo(ii,i,jj,2) has unaligned access   [ adapt.f(936,15) ]
               remark #15389: vectorization support: reference ytwo(ii,i,jj,2) has unaligned access   [ adapt.f(936,15) ]
               remark #15388: vectorization support: reference yone(ii,kk,i,1) has aligned access   [ adapt.f(936,15) ]
               remark #15388: vectorization support: reference ytwo(ii,i,jj,3) has aligned access   [ adapt.f(938,15) ]
               remark #15388: vectorization support: reference ytwo(ii,i,jj,3) has aligned access   [ adapt.f(938,15) ]
               remark #15389: vectorization support: reference yone(ii,kk,i,2) has unaligned access   [ adapt.f(938,15) ]
               remark #15389: vectorization support: reference ytwo(ii,i,jj,4) has unaligned access   [ adapt.f(940,15) ]
               remark #15389: vectorization support: reference ytwo(ii,i,jj,4) has unaligned access   [ adapt.f(940,15) ]
               remark #15389: vectorization support: reference yone(ii,kk,i,2) has unaligned access   [ adapt.f(940,15) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 0.564
               remark #15300: LOOP WAS VECTORIZED
               remark #15448: unmasked aligned unit stride loads: 3 
               remark #15449: unmasked aligned unit stride stores: 2 
               remark #15450: unmasked unaligned unit stride loads: 3 
               remark #15451: unmasked unaligned unit stride stores: 2 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 35 
               remark #15477: vector cost: 19.500 
               remark #15478: estimated potential speedup: 1.290 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at adapt.f(933,13) inlined into adapt.f(612,14)
            <Alternate Alignment Vectorized Loop>
            LOOP END

            LOOP BEGIN at adapt.f(933,13) inlined into adapt.f(612,14)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(949,11) inlined into adapt.f(612,14)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at adapt.f(947,7) inlined into adapt.f(612,14)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at adapt.f(948,9) inlined into adapt.f(612,14)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at adapt.f(950,13) inlined into adapt.f(612,14)
            <Peeled loop for vectorization>
            LOOP END

            LOOP BEGIN at adapt.f(950,13) inlined into adapt.f(612,14)
               remark #15389: vectorization support: reference y(ii,iz,jj) has unaligned access   [ adapt.f(951,15) ]
               remark #15389: vectorization support: reference y(ii,iz,jj) has unaligned access   [ adapt.f(951,29) ]
               remark #15389: vectorization support: reference ytwo(ii,kk,iz,1) has unaligned access   [ adapt.f(951,29) ]
               remark #15388: vectorization support: reference y1(ii,iz,jj,1) has aligned access   [ adapt.f(953,15) ]
               remark #15388: vectorization support: reference y1(ii,iz,jj,1) has aligned access   [ adapt.f(953,32) ]
               remark #15389: vectorization support: reference ytwo(ii,kk,iz,3) has unaligned access   [ adapt.f(953,32) ]
               remark #15389: vectorization support: reference y1(ii,iz,jj,2) has unaligned access   [ adapt.f(955,15) ]
               remark #15389: vectorization support: reference y1(ii,iz,jj,2) has unaligned access   [ adapt.f(955,32) ]
               remark #15389: vectorization support: reference ytwo(ii,kk,iz,2) has unaligned access   [ adapt.f(955,32) ]
               remark #15388: vectorization support: reference y1(ii,iz,jj,3) has aligned access   [ adapt.f(957,15) ]
               remark #15388: vectorization support: reference y1(ii,iz,jj,3) has aligned access   [ adapt.f(957,32) ]
               remark #15389: vectorization support: reference ytwo(ii,kk,iz,4) has unaligned access   [ adapt.f(957,32) ]
               remark #15389: vectorization support: reference y1(ii,iz,jj,4) has unaligned access   [ adapt.f(959,15) ]
               remark #15389: vectorization support: reference y1(ii,iz,jj,4) has unaligned access   [ adapt.f(959,32) ]
               remark #15389: vectorization support: reference ytwo(ii,kk,iz,1) has unaligned access   [ adapt.f(959,32) ]
               remark #15388: vectorization support: reference y1(ii,iz,jj,5) has aligned access   [ adapt.f(961,15) ]
               remark #15388: vectorization support: reference y1(ii,iz,jj,5) has aligned access   [ adapt.f(961,32) ]
               remark #15389: vectorization support: reference ytwo(ii,kk,iz,3) has unaligned access   [ adapt.f(961,32) ]
               remark #15389: vectorization support: reference y1(ii,iz,jj,6) has unaligned access   [ adapt.f(963,15) ]
               remark #15389: vectorization support: reference y1(ii,iz,jj,6) has unaligned access   [ adapt.f(963,32) ]
               remark #15389: vectorization support: reference ytwo(ii,kk,iz,2) has unaligned access   [ adapt.f(963,32) ]
               remark #15388: vectorization support: reference y1(ii,iz,jj,7) has aligned access   [ adapt.f(965,15) ]
               remark #15388: vectorization support: reference y1(ii,iz,jj,7) has aligned access   [ adapt.f(965,32) ]
               remark #15389: vectorization support: reference ytwo(ii,kk,iz,4) has unaligned access   [ adapt.f(965,32) ]
               remark #15381: vectorization support: unaligned access used inside loop body
               remark #15305: vectorization support: vector length 2
               remark #15309: vectorization support: normalized vectorization overhead 0.550
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 4 
               remark #15449: unmasked aligned unit stride stores: 4 
               remark #15450: unmasked unaligned unit stride loads: 8 
               remark #15451: unmasked unaligned unit stride stores: 4 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 70 
               remark #15477: vector cost: 40.000 
               remark #15478: estimated potential speedup: 1.270 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at adapt.f(950,13) inlined into adapt.f(612,14)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(377,21)
      remark #15388: vectorization support: reference xctemp(i) has aligned access   [ adapt.f(375,11) ]
      remark #15389: vectorization support: reference xc_(i,iel) has unaligned access   [ adapt.f(375,11) ]
      remark #15388: vectorization support: reference yctemp(i) has aligned access   [ adapt.f(376,11) ]
      remark #15389: vectorization support: reference yc_(i,iel) has unaligned access   [ adapt.f(376,11) ]
      remark #15388: vectorization support: reference zctemp(i) has aligned access   [ adapt.f(377,11) ]
      remark #15389: vectorization support: reference zc_(i,iel) has unaligned access   [ adapt.f(377,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.125
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 3 
      remark #15450: unmasked unaligned unit stride loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 1.080 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(383,32)
   <Distributed chunk1>
      remark #15388: vectorization support: reference cbctemp(i) has aligned access   [ adapt.f(380,11) ]
      remark #15389: vectorization support: reference cbc_(i,iel) has unaligned access   [ adapt.f(380,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 3
      remark #15309: vectorization support: normalized vectorization overhead 0.200
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.660 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(383,32)
   <Distributed chunk2>
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <sjetemp(ii,jj,i)>, stride is 4   [ adapt.f(383,15) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <sje_(ii,jj,i,iel)>, stride is unknown to compiler   [ adapt.f(383,15) ]
      remark #15305: vectorization support: vector length 2
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 6.000 
      remark #15478: estimated potential speedup: 0.660 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at adapt.f(381,11)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <sjetemp(ii,jj,i)>, stride is 2   [ adapt.f(383,15) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <sje_(ii,jj,i,iel)>, stride is unknown to compiler   [ adapt.f(383,15) ]
         remark #15305: vectorization support: vector length 2
         remark #15452: unmasked strided loads: 1 
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 5.500 
         remark #15478: estimated potential speedup: 0.720 
         remark #15488: --- end vector cost summary ---

         LOOP BEGIN at adapt.f(382,13)
            remark #15388: vectorization support: reference sjetemp(ii,jj,i) has aligned access   [ adapt.f(383,15) ]
            remark #15389: vectorization support: reference sje_(ii,jj,i,iel) has unaligned access   [ adapt.f(383,15) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15305: vectorization support: vector length 2
            remark #15427: loop was completely unrolled
            remark #15309: vectorization support: normalized vectorization overhead 0.750
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 4.000 
            remark #15478: estimated potential speedup: 0.570 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at adapt.f(382,13)
         LOOP END
      LOOP END

      LOOP BEGIN at adapt.f(381,11)

         LOOP BEGIN at adapt.f(382,13)
         LOOP END

         LOOP BEGIN at adapt.f(382,13)
         LOOP END
      LOOP END

      LOOP BEGIN at adapt.f(381,11)

         LOOP BEGIN at adapt.f(382,13)
         LOOP END

         LOOP BEGIN at adapt.f(382,13)
         LOOP END
      LOOP END

      LOOP BEGIN at adapt.f(381,11)

         LOOP BEGIN at adapt.f(382,13)
         LOOP END

         LOOP BEGIN at adapt.f(382,13)
         LOOP END
      LOOP END

      LOOP BEGIN at adapt.f(381,11)

         LOOP BEGIN at adapt.f(382,13)
         LOOP END

         LOOP BEGIN at adapt.f(382,13)
         LOOP END
      LOOP END

      LOOP BEGIN at adapt.f(381,11)

         LOOP BEGIN at adapt.f(382,13)
         LOOP END

         LOOP BEGIN at adapt.f(382,13)
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: DO_COARSEN

    Report from: Vector optimizations [vec]


LOOP BEGIN at adapt.f(139,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at adapt.f(139,7)
   remark #15388: vectorization support: reference mt_to_id_old_(iel) has aligned access   [ adapt.f(141,9) ]
   remark #15388: vectorization support: reference mt_to_id_(iel) has aligned access   [ adapt.f(141,9) ]
   remark #15388: vectorization support: reference mt_to_id_(iel) has aligned access   [ adapt.f(142,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.730 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at adapt.f(139,7)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at adapt.f(139,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at adapt.f(145,7)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at adapt.f(145,7)
      remark #15389: vectorization support: reference ifcoa_id_(iel) has unaligned access   [ adapt.f(147,9) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.230 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(145,7)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(158,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at adapt.f(202,17)
      remark #15388: vectorization support: reference ntp(i) has aligned access   [ adapt.f(201,27) ]
      remark #15388: vectorization support: reference ntp(i) has aligned access   [ adapt.f(201,27) ]
      remark #15388: vectorization support: reference ntp(i) has aligned access   [ adapt.f(201,27) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <f_c(1,i)>, stride is 3   [ adapt.f(671,7) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <f_c(2,i)>, stride is 3   [ adapt.f(672,7) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <f_c(3,i)>, stride is 3   [ adapt.f(673,7) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cbc_(n1,ntp(i))>, part of index is read from memory   [ adapt.f(674,11) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cbc_(n2,ntp(i))>, masked, part of index is read from memory   [ adapt.f(674,34) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cbc_(n3,ntp(i))>, masked, part of index is read from memory   [ adapt.f(675,11) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <sje_(1,1,n1,ntp(i))>, masked, 64-bit indexed, part of index is read from memory   [ adapt.f(678,9) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <sje_(1,1,n2,ntp(i))>, masked, 64-bit indexed, part of index is read from memory   [ adapt.f(679,9) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <sje_(1,1,n3,ntp(i))>, masked, 64-bit indexed, part of index is read from memory   [ adapt.f(680,9) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cbc_(n2,ntemp1)>, masked, part of index is read from memory   [ adapt.f(682,12) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cbc_(n3,ntemp1)>, masked, part of index is read from memory   [ adapt.f(683,12) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cbc_(n3,ntemp2)>, masked, part of index is read from memory   [ adapt.f(686,12) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cbc_(n1,ntemp2)>, masked, part of index is read from memory   [ adapt.f(687,12) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cbc_(n1,ntemp3)>, masked, part of index is read from memory   [ adapt.f(690,12) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cbc_(n2,ntemp3)>, masked, part of index is read from memory   [ adapt.f(691,12) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cbc_(n1,ntp(i))>, masked, part of index is read from memory   [ adapt.f(693,13) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cbc_(n2,ntp(i))>, masked, part of index is read from memory   [ adapt.f(695,13) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <cbc_(n3,ntp(i))>, masked, part of index is read from memory   [ adapt.f(697,13) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.028
      remark #15450: unmasked unaligned unit stride loads: 9 
      remark #15452: unmasked strided loads: 3 
      remark #15458: masked indexed (or gather) loads: 14 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 177 
      remark #15477: vector cost: 921.000 
      remark #15478: estimated potential speedup: 0.190 
      remark #15487: type converts: 6 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(186,13)
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <tree_(ntp(i))>, part of index is read from memory   [ adapt.f(187,18) ]
      remark #15305: vectorization support: vector length 4
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.066
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 20 
      remark #15477: vector cost: 13.250 
      remark #15478: estimated potential speedup: 1.410 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(193,15)
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <ich_(ntp(i))>, part of index is read from memory   [ adapt.f(194,20) ]
      remark #15305: vectorization support: vector length 4
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.039
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 20 
      remark #15477: vector cost: 12.750 
      remark #15478: estimated potential speedup: 1.500 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(217,15)
      remark #15388: vectorization support: reference ntp(i) has aligned access   [ adapt.f(218,17) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: irregularly indexed store was emulated for the variable <ifcoa_id_(ntp(i))>, part of index is read from memory   [ adapt.f(218,17) ]
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 4
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 12.000 
      remark #15478: estimated potential speedup: 0.330 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(221,15)
      remark #15389: vectorization support: reference ntp(i+1) has unaligned access   [ adapt.f(222,18) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: irregularly indexed store was emulated for the variable <skip_(ntp(i+1))>, part of index is read from memory   [ adapt.f(222,18) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 3
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 13.000 
      remark #15478: estimated potential speedup: 0.340 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(242,7)
   remark #15389: vectorization support: reference mt_to_id_old_(miel) has unaligned access   [ adapt.f(244,9) ]
   remark #15389: vectorization support: reference front_(miel) has unaligned access   [ adapt.f(247,13) ]
   remark #15389: vectorization support: reference front_(miel) has unaligned access   [ adapt.f(248,27) ]
   remark #15389: vectorization support: reference front_(miel) has unaligned access   [ adapt.f(250,26) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <skip_(iel)>, part of index is read from memory   [ adapt.f(245,17) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <action_(front_(miel))>, masked, part of index is read from memory   [ adapt.f(247,13) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <mt_to_id_(mielnew)>, masked, part of index is read from memory   [ adapt.f(252,11) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.006
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15456: masked unaligned unit stride loads: 4 
   remark #15459: masked indexed (or scatter) stores: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 29 
   remark #15477: vector cost: 130.750 
   remark #15478: estimated potential speedup: 0.220 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at adapt.f(258,7)
   remark #15382: vectorization support: call to function MERGING cannot be vectorized   [ adapt.f(272,14) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between ntp(1) (263:9) and ntp (272:14)
   remark #15346: vector dependence: assumed OUTPUT dependence between ntp (272:14) and ntp(1) (263:9)
LOOP END
===========================================================================

Begin optimization report for: MERGING

    Report from: Vector optimizations [vec]

remark #25464: Some optimizations were skipped to constrain compile time. Consider overriding limits (-qoverride-limits).

LOOP BEGIN at adapt.f(1003,7)
   remark #15389: vectorization support: reference xc_(i,ielnew) has unaligned access   [ adapt.f(1004,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i,ielnew)>, stride is 2   [ adapt.f(1004,9) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i,ielnew)>, stride is 2   [ adapt.f(1007,9) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.292
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 6.000 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at adapt.f(1006,7)
LOOP END

LOOP BEGIN at adapt.f(1009,7)
   remark #15389: vectorization support: reference yc_(i,ielnew) has unaligned access   [ adapt.f(1010,9) ]
   remark #15389: vectorization support: reference yc_(i+4,ielnew) has unaligned access   [ adapt.f(1011,9) ]
   remark #15389: vectorization support: reference yc_(i,ielnew) has unaligned access   [ adapt.f(1014,9) ]
   remark #15389: vectorization support: reference yc_(i+4,ielnew) has unaligned access   [ adapt.f(1015,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15451: unmasked unaligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 10.000 
   remark #15478: estimated potential speedup: 0.700 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at adapt.f(1013,7)
LOOP END

LOOP BEGIN at adapt.f(1017,7)
   remark #15389: vectorization support: reference zc_(i,ielnew) has unaligned access   [ adapt.f(1018,9) ]
   remark #15389: vectorization support: reference zc_(i,ielnew) has unaligned access   [ adapt.f(1021,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 0.930 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at adapt.f(1020,7)
LOOP END

LOOP BEGIN at adapt.f(1036,14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between ntempa(ii) (1029:11) and ntempa(ii) (1050:15)
   remark #15346: vector dependence: assumed ANTI dependence between ntempa(ii) (1050:15) and ntempa(ii) (1029:11)

   LOOP BEGIN at adapt.f(1028,9)
      remark #15388: vectorization support: reference ntempa(ii) has aligned access   [ adapt.f(1029,11) ]
      remark #15388: vectorization support: reference children(ii,i) has aligned access   [ adapt.f(1029,11) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <iela(children(ii,i))>, part of index is read from memory   [ adapt.f(1029,11) ]
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.058
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 13.000 
      remark #15478: estimated potential speedup: 0.360 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1049,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between sje_(1,1,i,ntempa(ii)) (1050:15) and sje_(iijj(1,ii),iijj(2,ii),i,ielnew) (1055:15)
      remark #15346: vector dependence: assumed FLOW dependence between sje_(iijj(1,ii),iijj(2,ii),i,ielnew) (1055:15) and sje_(1,1,i,ntempa(ii)) (1050:15)
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1208,9) inlined into adapt.f(1089,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.016
   remark #15452: unmasked strided loads: 35 
   remark #15453: unmasked strided stores: 35 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 180 
   remark #15477: vector cost: 246.500 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp1(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp1(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp1(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp1(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp1(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp1(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp1(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp1(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp1(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp1(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1208,9) inlined into adapt.f(1089,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.016
   remark #15452: unmasked strided loads: 35 
   remark #15453: unmasked strided stores: 35 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 180 
   remark #15477: vector cost: 246.500 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp2(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp2(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp2(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp2(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp2(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp2(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp2(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp2(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp2(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp2(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1208,9) inlined into adapt.f(1089,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.016
   remark #15452: unmasked strided loads: 35 
   remark #15453: unmasked strided stores: 35 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 180 
   remark #15477: vector cost: 246.500 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp3(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp3(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp3(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp3(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp3(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp3(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp3(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp3(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp3(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp3(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1208,9) inlined into adapt.f(1089,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.016
   remark #15452: unmasked strided loads: 35 
   remark #15453: unmasked strided stores: 35 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 180 
   remark #15477: vector cost: 246.500 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp4(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp4(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp4(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp4(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp4(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp4(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp4(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp4(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1089,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp4(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp4(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp5(ix,2,iz)>, stride is 25   [ adapt.f(1175,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
      remark #15389: vectorization support: reference temp5(ix,2,iz) has unaligned access   [ adapt.f(1175,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1172,9) ]

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between temp5(ix,2,iz) (1177:13) and temp5(ix,2,iz) (1177:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between temp5(ix,2,iz) (1177:13) and temp5(ix,2,iz) (1177:13)

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
         remark #15389: vectorization support: reference temp5(ix,2,iz) has unaligned access   [ adapt.f(1177,13) ]
         remark #15389: vectorization support: reference temp5(ix,2,iz) has unaligned access   [ adapt.f(1177,24) ]
         remark #15389: vectorization support: reference temp1(ix,ip,iz) has unaligned access   [ adapt.f(1177,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk3>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp5(ix,4,iz)>, stride is 25   [ adapt.f(1182,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
      remark #15389: vectorization support: reference temp5(ix,4,iz) has unaligned access   [ adapt.f(1182,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk4>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1172,9) ]

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between temp5(ix,4,iz) (1184:13) and temp5(ix,4,iz) (1184:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between temp5(ix,4,iz) (1184:13) and temp5(ix,4,iz) (1184:13)

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
         remark #15389: vectorization support: reference temp5(ix,4,iz) has unaligned access   [ adapt.f(1184,13) ]
         remark #15389: vectorization support: reference temp5(ix,4,iz) has unaligned access   [ adapt.f(1184,24) ]
         remark #15389: vectorization support: reference temp2(ix,ip,iz) has unaligned access   [ adapt.f(1184,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk5>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp5(ix,1,iz)>, stride is 25   [ adapt.f(1173,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(ix,1,iz)>, stride is 25   [ adapt.f(1173,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
      remark #15389: vectorization support: reference temp5(ix,1,iz) has unaligned access   [ adapt.f(1173,11) ]
      remark #15389: vectorization support: reference temp1(ix,1,iz) has unaligned access   [ adapt.f(1173,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk6>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp5(ix,3,iz)>, stride is 25   [ adapt.f(1180,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(ix,5,iz)>, stride is 25   [ adapt.f(1180,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
      remark #15389: vectorization support: reference temp5(ix,3,iz) has unaligned access   [ adapt.f(1180,11) ]
      remark #15389: vectorization support: reference temp1(ix,5,iz) has unaligned access   [ adapt.f(1180,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk7>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp5(ix,5,iz)>, stride is 25   [ adapt.f(1187,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(ix,5,iz)>, stride is 25   [ adapt.f(1187,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
      remark #15389: vectorization support: reference temp5(ix,5,iz) has unaligned access   [ adapt.f(1187,11) ]
      remark #15389: vectorization support: reference temp2(ix,5,iz) has unaligned access   [ adapt.f(1187,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp6(ix,2,iz)>, stride is 25   [ adapt.f(1175,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
      remark #15389: vectorization support: reference temp6(ix,2,iz) has unaligned access   [ adapt.f(1175,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1172,9) ]

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between temp6(ix,2,iz) (1177:13) and temp6(ix,2,iz) (1177:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between temp6(ix,2,iz) (1177:13) and temp6(ix,2,iz) (1177:13)

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
         remark #15389: vectorization support: reference temp6(ix,2,iz) has unaligned access   [ adapt.f(1177,13) ]
         remark #15389: vectorization support: reference temp6(ix,2,iz) has unaligned access   [ adapt.f(1177,24) ]
         remark #15389: vectorization support: reference temp3(ix,ip,iz) has unaligned access   [ adapt.f(1177,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk3>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp6(ix,4,iz)>, stride is 25   [ adapt.f(1182,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
      remark #15389: vectorization support: reference temp6(ix,4,iz) has unaligned access   [ adapt.f(1182,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk4>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1172,9) ]

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between temp6(ix,4,iz) (1184:13) and temp6(ix,4,iz) (1184:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between temp6(ix,4,iz) (1184:13) and temp6(ix,4,iz) (1184:13)

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
         remark #15389: vectorization support: reference temp6(ix,4,iz) has unaligned access   [ adapt.f(1184,13) ]
         remark #15389: vectorization support: reference temp6(ix,4,iz) has unaligned access   [ adapt.f(1184,24) ]
         remark #15389: vectorization support: reference temp4(ix,ip,iz) has unaligned access   [ adapt.f(1184,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk5>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp6(ix,1,iz)>, stride is 25   [ adapt.f(1173,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(ix,1,iz)>, stride is 25   [ adapt.f(1173,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
      remark #15389: vectorization support: reference temp6(ix,1,iz) has unaligned access   [ adapt.f(1173,11) ]
      remark #15389: vectorization support: reference temp3(ix,1,iz) has unaligned access   [ adapt.f(1173,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk6>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp6(ix,3,iz)>, stride is 25   [ adapt.f(1180,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(ix,5,iz)>, stride is 25   [ adapt.f(1180,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
      remark #15389: vectorization support: reference temp6(ix,3,iz) has unaligned access   [ adapt.f(1180,11) ]
      remark #15389: vectorization support: reference temp3(ix,5,iz) has unaligned access   [ adapt.f(1180,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1089,12)
<Distributed chunk7>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp6(ix,5,iz)>, stride is 25   [ adapt.f(1187,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(ix,5,iz)>, stride is 25   [ adapt.f(1187,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
      remark #15389: vectorization support: reference temp6(ix,5,iz) has unaligned access   [ adapt.f(1187,11) ]
      remark #15389: vectorization support: reference temp4(ix,5,iz) has unaligned access   [ adapt.f(1187,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1089,12)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,2)>, stride is 5   [ adapt.f(1139,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
      remark #15389: vectorization support: reference y(ix,iy,2) has unaligned access   [ adapt.f(1139,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk3>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1089,12)
<Distributed chunk2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1136,9) ]

   LOOP BEGIN at adapt.f(1140,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,iy,2) (1141:13) and y(ix,iy,2) (1141:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,iy,2) (1141:13) and y(ix,iy,2) (1141:13)

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
         remark #15389: vectorization support: reference y(ix,iy,2) has unaligned access   [ adapt.f(1141,13) ]
         remark #15389: vectorization support: reference y(ix,iy,2) has unaligned access   [ adapt.f(1141,24) ]
         remark #15389: vectorization support: reference temp5(ix,iy,ip) has unaligned access   [ adapt.f(1141,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1140,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1140,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1140,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1140,11) inlined into adapt.f(1089,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1089,12)
<Distributed chunk3>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,4)>, stride is 5   [ adapt.f(1146,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
      remark #15389: vectorization support: reference y(ix,iy,4) has unaligned access   [ adapt.f(1146,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1089,12)
<Distributed chunk4>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1136,9) ]

   LOOP BEGIN at adapt.f(1147,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,iy,4) (1148:13) and y(ix,iy,4) (1148:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,iy,4) (1148:13) and y(ix,iy,4) (1148:13)

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
         remark #15389: vectorization support: reference y(ix,iy,4) has unaligned access   [ adapt.f(1148,13) ]
         remark #15389: vectorization support: reference y(ix,iy,4) has unaligned access   [ adapt.f(1148,24) ]
         remark #15389: vectorization support: reference temp6(ix,iy,ip) has unaligned access   [ adapt.f(1148,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1147,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1147,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1147,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1147,11) inlined into adapt.f(1089,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1089,12)
<Distributed chunk5>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,1)>, stride is 5   [ adapt.f(1137,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp5(ix,iy,1)>, stride is 5   [ adapt.f(1137,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
      remark #15389: vectorization support: reference y(ix,iy,1) has unaligned access   [ adapt.f(1137,11) ]
      remark #15389: vectorization support: reference temp5(ix,iy,1) has unaligned access   [ adapt.f(1137,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk5>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1089,12)
<Distributed chunk6>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,3)>, stride is 5   [ adapt.f(1144,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp5(ix,iy,5)>, stride is 5   [ adapt.f(1144,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
      remark #15389: vectorization support: reference y(ix,iy,3) has unaligned access   [ adapt.f(1144,11) ]
      remark #15389: vectorization support: reference temp5(ix,iy,5) has unaligned access   [ adapt.f(1144,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk6>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1089,12)
<Distributed chunk7>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,5)>, stride is 5   [ adapt.f(1151,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp6(ix,iy,5)>, stride is 5   [ adapt.f(1151,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
      remark #15389: vectorization support: reference y(ix,iy,5) has unaligned access   [ adapt.f(1151,11) ]
      remark #15389: vectorization support: reference temp6(ix,iy,5) has unaligned access   [ adapt.f(1151,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1089,12)
   <Distributed chunk7>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: FIND_COARSEN

    Report from: Vector optimizations [vec]


LOOP BEGIN at adapt.f(724,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at adapt.f(729,13)
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15399: vectorization support: unroll factor set to 3
      remark #15309: vectorization support: normalized vectorization overhead 0.212
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 5.500 
      remark #15478: estimated potential speedup: 2.700 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: CHECK_REFINE

    Report from: Vector optimizations [vec]


LOOP BEGIN at adapt.f(798,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at adapt.f(802,11)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at adapt.f(816,15)
         remark #15382: vectorization support: call to function ifsame_ cannot be vectorized   [ adapt.f(639,11) ]
         remark #15382: vectorization support: call to function ifsame_ cannot be vectorized   [ adapt.f(640,11) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between nntemp (820:21) and nntemp (640:11)
         remark #15346: vector dependence: assumed OUTPUT dependence between nntemp (640:11) and nntemp (820:21)
      LOOP END

      LOOP BEGIN at adapt.f(837,21)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between ich_(nntemp) (835:21) and ich_(iel) (836:21)
         remark #15346: vector dependence: assumed OUTPUT dependence between ich_(iel) (836:21) and ich_(nntemp) (835:21)
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: FIND_REFINE

    Report from: Vector optimizations [vec]


LOOP BEGIN at adapt.f(763,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between if_refine (769:16) and if_refine (769:32)
   remark #15346: vector dependence: assumed FLOW dependence between if_refine (769:32) and if_refine (769:16)
   remark #15346: vector dependence: assumed ANTI dependence between if_refine (769:16) and if_refine (769:32)
LOOP END
===========================================================================

Begin optimization report for: REMAP

    Report from: Vector optimizations [vec]


LOOP BEGIN at adapt.f(921,7)
<Distributed chunk1>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at adapt.f(922,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at adapt.f(924,13)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at adapt.f(924,13)
         remark #15388: vectorization support: reference yone(ii,jj,i,1) has aligned access   [ adapt.f(925,15) ]
         remark #15388: vectorization support: reference yone(ii,jj,i,1) has aligned access   [ adapt.f(925,15) ]
         remark #15389: vectorization support: reference ixmc1(ii,kk) has unaligned access   [ adapt.f(925,15) ]
         remark #15389: vectorization support: reference yone(ii,jj,i,2) has unaligned access   [ adapt.f(926,15) ]
         remark #15389: vectorization support: reference yone(ii,jj,i,2) has unaligned access   [ adapt.f(926,15) ]
         remark #15389: vectorization support: reference ixmc2(ii,kk) has unaligned access   [ adapt.f(926,15) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.425
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 18 
         remark #15477: vector cost: 10.000 
         remark #15478: estimated potential speedup: 1.130 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(924,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(932,11)
<Distributed chunk2>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at adapt.f(921,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at adapt.f(931,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at adapt.f(933,13)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at adapt.f(933,13)
            remark #15388: vectorization support: reference ytwo(ii,i,jj,1) has aligned access   [ adapt.f(934,15) ]
            remark #15388: vectorization support: reference ytwo(ii,i,jj,1) has aligned access   [ adapt.f(934,15) ]
            remark #15388: vectorization support: reference yone(ii,kk,i,1) has aligned access   [ adapt.f(934,15) ]
            remark #15389: vectorization support: reference ytwo(ii,i,jj,2) has unaligned access   [ adapt.f(936,15) ]
            remark #15389: vectorization support: reference ytwo(ii,i,jj,2) has unaligned access   [ adapt.f(936,15) ]
            remark #15388: vectorization support: reference yone(ii,kk,i,1) has aligned access   [ adapt.f(936,15) ]
            remark #15388: vectorization support: reference ytwo(ii,i,jj,3) has aligned access   [ adapt.f(938,15) ]
            remark #15388: vectorization support: reference ytwo(ii,i,jj,3) has aligned access   [ adapt.f(938,15) ]
            remark #15389: vectorization support: reference yone(ii,kk,i,2) has unaligned access   [ adapt.f(938,15) ]
            remark #15389: vectorization support: reference ytwo(ii,i,jj,4) has unaligned access   [ adapt.f(940,15) ]
            remark #15389: vectorization support: reference ytwo(ii,i,jj,4) has unaligned access   [ adapt.f(940,15) ]
            remark #15389: vectorization support: reference yone(ii,kk,i,2) has unaligned access   [ adapt.f(940,15) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.564
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 3 
            remark #15449: unmasked aligned unit stride stores: 2 
            remark #15450: unmasked unaligned unit stride loads: 3 
            remark #15451: unmasked unaligned unit stride stores: 2 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 35 
            remark #15477: vector cost: 19.500 
            remark #15478: estimated potential speedup: 1.290 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at adapt.f(933,13)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at adapt.f(933,13)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(949,11)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at adapt.f(947,7)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at adapt.f(948,9)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at adapt.f(950,13)
         <Peeled loop for vectorization>
         LOOP END

         LOOP BEGIN at adapt.f(950,13)
            remark #15389: vectorization support: reference y(ii,iz,jj) has unaligned access   [ adapt.f(951,15) ]
            remark #15389: vectorization support: reference y(ii,iz,jj) has unaligned access   [ adapt.f(951,29) ]
            remark #15389: vectorization support: reference ytwo(ii,kk,iz,1) has unaligned access   [ adapt.f(951,29) ]
            remark #15388: vectorization support: reference y1(ii,iz,jj,1) has aligned access   [ adapt.f(953,15) ]
            remark #15388: vectorization support: reference y1(ii,iz,jj,1) has aligned access   [ adapt.f(953,32) ]
            remark #15389: vectorization support: reference ytwo(ii,kk,iz,3) has unaligned access   [ adapt.f(953,32) ]
            remark #15389: vectorization support: reference y1(ii,iz,jj,2) has unaligned access   [ adapt.f(955,15) ]
            remark #15389: vectorization support: reference y1(ii,iz,jj,2) has unaligned access   [ adapt.f(955,32) ]
            remark #15389: vectorization support: reference ytwo(ii,kk,iz,2) has unaligned access   [ adapt.f(955,32) ]
            remark #15388: vectorization support: reference y1(ii,iz,jj,3) has aligned access   [ adapt.f(957,15) ]
            remark #15388: vectorization support: reference y1(ii,iz,jj,3) has aligned access   [ adapt.f(957,32) ]
            remark #15389: vectorization support: reference ytwo(ii,kk,iz,4) has unaligned access   [ adapt.f(957,32) ]
            remark #15389: vectorization support: reference y1(ii,iz,jj,4) has unaligned access   [ adapt.f(959,15) ]
            remark #15389: vectorization support: reference y1(ii,iz,jj,4) has unaligned access   [ adapt.f(959,32) ]
            remark #15389: vectorization support: reference ytwo(ii,kk,iz,1) has unaligned access   [ adapt.f(959,32) ]
            remark #15388: vectorization support: reference y1(ii,iz,jj,5) has aligned access   [ adapt.f(961,15) ]
            remark #15388: vectorization support: reference y1(ii,iz,jj,5) has aligned access   [ adapt.f(961,32) ]
            remark #15389: vectorization support: reference ytwo(ii,kk,iz,3) has unaligned access   [ adapt.f(961,32) ]
            remark #15389: vectorization support: reference y1(ii,iz,jj,6) has unaligned access   [ adapt.f(963,15) ]
            remark #15389: vectorization support: reference y1(ii,iz,jj,6) has unaligned access   [ adapt.f(963,32) ]
            remark #15389: vectorization support: reference ytwo(ii,kk,iz,2) has unaligned access   [ adapt.f(963,32) ]
            remark #15388: vectorization support: reference y1(ii,iz,jj,7) has aligned access   [ adapt.f(965,15) ]
            remark #15388: vectorization support: reference y1(ii,iz,jj,7) has aligned access   [ adapt.f(965,32) ]
            remark #15389: vectorization support: reference ytwo(ii,kk,iz,4) has unaligned access   [ adapt.f(965,32) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.550
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 4 
            remark #15449: unmasked aligned unit stride stores: 4 
            remark #15450: unmasked unaligned unit stride loads: 8 
            remark #15451: unmasked unaligned unit stride stores: 4 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 70 
            remark #15477: vector cost: 40.000 
            remark #15478: estimated potential speedup: 1.270 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at adapt.f(950,13)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: REMAP2

    Report from: Vector optimizations [vec]

remark #25464: Some optimizations were skipped to constrain compile time. Consider overriding limits (-qoverride-limits).

LOOP BEGIN at adapt.f(1208,9) inlined into adapt.f(1111,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp1(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.016
   remark #15452: unmasked strided loads: 35 
   remark #15453: unmasked strided stores: 35 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 180 
   remark #15477: vector cost: 246.500 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp1(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp1(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp1(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp1(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp1(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp1(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp1(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp1(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1111,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp1(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp1(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1208,9) inlined into adapt.f(1112,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.016
   remark #15452: unmasked strided loads: 35 
   remark #15453: unmasked strided stores: 35 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 180 
   remark #15477: vector cost: 246.500 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp2(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp2(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp2(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp2(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp2(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp2(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp2(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp2(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1112,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp2(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp2(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1208,9) inlined into adapt.f(1113,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp3(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.016
   remark #15452: unmasked strided loads: 35 
   remark #15453: unmasked strided stores: 35 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 180 
   remark #15477: vector cost: 246.500 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp3(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp3(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp3(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp3(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp3(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp3(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp3(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp3(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1113,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp3(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp3(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1208,9) inlined into adapt.f(1114,12)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp4(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.016
   remark #15452: unmasked strided loads: 35 
   remark #15453: unmasked strided stores: 35 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 180 
   remark #15477: vector cost: 246.500 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp4(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp4(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp4(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp4(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp4(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp4(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp4(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp4(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
   LOOP END

   LOOP BEGIN at adapt.f(1212,11) inlined into adapt.f(1114,12)
      remark #15389: vectorization support: reference map2(ip) has unaligned access   [ adapt.f(1213,24) ]
      remark #15389: vectorization support: reference x1(ip,iy,iz) has unaligned access   [ adapt.f(1213,44) ]
      remark #15389: vectorization support: reference map4(ip) has unaligned access   [ adapt.f(1220,24) ]
      remark #15389: vectorization support: reference x2(ip,iy,iz) has unaligned access   [ adapt.f(1220,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 1.250
      remark #15355: vectorization support: temp4(2,iy,iz) is double type reduction   [ adapt.f(1213,13) ]
      remark #15355: vectorization support: temp4(4,iy,iz) is double type reduction   [ adapt.f(1220,13) ]
      remark #15450: unmasked unaligned unit stride loads: 4 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 18 
      remark #15477: vector cost: 10.000 
      remark #15478: estimated potential speedup: 0.830 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1115,12)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp5(ix,2,iz)>, stride is 25   [ adapt.f(1175,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk3>
      remark #15389: vectorization support: reference temp5(ix,2,iz) has unaligned access   [ adapt.f(1175,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk3>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1115,12)
<Distributed chunk2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1172,9) ]

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1115,12)
   <Distributed chunk4>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between temp5(ix,2,iz) (1177:13) and temp5(ix,2,iz) (1177:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between temp5(ix,2,iz) (1177:13) and temp5(ix,2,iz) (1177:13)

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
         remark #15389: vectorization support: reference temp5(ix,2,iz) has unaligned access   [ adapt.f(1177,13) ]
         remark #15389: vectorization support: reference temp5(ix,2,iz) has unaligned access   [ adapt.f(1177,24) ]
         remark #15389: vectorization support: reference temp1(ix,ip,iz) has unaligned access   [ adapt.f(1177,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1115,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1115,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1115,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1115,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1115,12)
<Distributed chunk3>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp5(ix,4,iz)>, stride is 25   [ adapt.f(1182,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk1>
      remark #15389: vectorization support: reference temp5(ix,4,iz) has unaligned access   [ adapt.f(1182,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1115,12)
<Distributed chunk4>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1172,9) ]

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1115,12)
   <Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between temp5(ix,4,iz) (1184:13) and temp5(ix,4,iz) (1184:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between temp5(ix,4,iz) (1184:13) and temp5(ix,4,iz) (1184:13)

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
         remark #15389: vectorization support: reference temp5(ix,4,iz) has unaligned access   [ adapt.f(1184,13) ]
         remark #15389: vectorization support: reference temp5(ix,4,iz) has unaligned access   [ adapt.f(1184,24) ]
         remark #15389: vectorization support: reference temp2(ix,ip,iz) has unaligned access   [ adapt.f(1184,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1115,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1115,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1115,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1115,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1115,12)
<Distributed chunk5>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp5(ix,1,iz)>, stride is 25   [ adapt.f(1173,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(ix,1,iz)>, stride is 25   [ adapt.f(1173,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk5>
      remark #15389: vectorization support: reference temp5(ix,1,iz) has unaligned access   [ adapt.f(1173,11) ]
      remark #15389: vectorization support: reference temp1(ix,1,iz) has unaligned access   [ adapt.f(1173,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk5>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1115,12)
<Distributed chunk6>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp5(ix,3,iz)>, stride is 25   [ adapt.f(1180,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp1(ix,5,iz)>, stride is 25   [ adapt.f(1180,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk6>
      remark #15389: vectorization support: reference temp5(ix,3,iz) has unaligned access   [ adapt.f(1180,11) ]
      remark #15389: vectorization support: reference temp1(ix,5,iz) has unaligned access   [ adapt.f(1180,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk6>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1115,12)
<Distributed chunk7>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp5(ix,5,iz)>, stride is 25   [ adapt.f(1187,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp2(ix,5,iz)>, stride is 25   [ adapt.f(1187,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk7>
      remark #15389: vectorization support: reference temp5(ix,5,iz) has unaligned access   [ adapt.f(1187,11) ]
      remark #15389: vectorization support: reference temp2(ix,5,iz) has unaligned access   [ adapt.f(1187,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1115,12)
   <Distributed chunk7>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1116,12)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp6(ix,2,iz)>, stride is 25   [ adapt.f(1175,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk3>
      remark #15389: vectorization support: reference temp6(ix,2,iz) has unaligned access   [ adapt.f(1175,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk3>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1116,12)
<Distributed chunk2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1172,9) ]

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1116,12)
   <Distributed chunk4>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between temp6(ix,2,iz) (1177:13) and temp6(ix,2,iz) (1177:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between temp6(ix,2,iz) (1177:13) and temp6(ix,2,iz) (1177:13)

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
         remark #15389: vectorization support: reference temp6(ix,2,iz) has unaligned access   [ adapt.f(1177,13) ]
         remark #15389: vectorization support: reference temp6(ix,2,iz) has unaligned access   [ adapt.f(1177,24) ]
         remark #15389: vectorization support: reference temp3(ix,ip,iz) has unaligned access   [ adapt.f(1177,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1116,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1116,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1116,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11) inlined into adapt.f(1116,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1116,12)
<Distributed chunk3>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp6(ix,4,iz)>, stride is 25   [ adapt.f(1182,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk1>
      remark #15389: vectorization support: reference temp6(ix,4,iz) has unaligned access   [ adapt.f(1182,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1116,12)
<Distributed chunk4>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1172,9) ]

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1116,12)
   <Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between temp6(ix,4,iz) (1184:13) and temp6(ix,4,iz) (1184:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between temp6(ix,4,iz) (1184:13) and temp6(ix,4,iz) (1184:13)

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
         remark #15389: vectorization support: reference temp6(ix,4,iz) has unaligned access   [ adapt.f(1184,13) ]
         remark #15389: vectorization support: reference temp6(ix,4,iz) has unaligned access   [ adapt.f(1184,24) ]
         remark #15389: vectorization support: reference temp4(ix,ip,iz) has unaligned access   [ adapt.f(1184,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1116,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1116,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1116,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11) inlined into adapt.f(1116,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1116,12)
<Distributed chunk5>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp6(ix,1,iz)>, stride is 25   [ adapt.f(1173,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(ix,1,iz)>, stride is 25   [ adapt.f(1173,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk5>
      remark #15389: vectorization support: reference temp6(ix,1,iz) has unaligned access   [ adapt.f(1173,11) ]
      remark #15389: vectorization support: reference temp3(ix,1,iz) has unaligned access   [ adapt.f(1173,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk5>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1116,12)
<Distributed chunk6>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp6(ix,3,iz)>, stride is 25   [ adapt.f(1180,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp3(ix,5,iz)>, stride is 25   [ adapt.f(1180,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk6>
      remark #15389: vectorization support: reference temp6(ix,3,iz) has unaligned access   [ adapt.f(1180,11) ]
      remark #15389: vectorization support: reference temp3(ix,5,iz) has unaligned access   [ adapt.f(1180,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk6>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7) inlined into adapt.f(1116,12)
<Distributed chunk7>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <temp6(ix,5,iz)>, stride is 25   [ adapt.f(1187,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp4(ix,5,iz)>, stride is 25   [ adapt.f(1187,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk7>
      remark #15389: vectorization support: reference temp6(ix,5,iz) has unaligned access   [ adapt.f(1187,11) ]
      remark #15389: vectorization support: reference temp4(ix,5,iz) has unaligned access   [ adapt.f(1187,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9) inlined into adapt.f(1116,12)
   <Distributed chunk7>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1117,12)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,2)>, stride is 5   [ adapt.f(1139,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk3>
      remark #15389: vectorization support: reference y(ix,iy,2) has unaligned access   [ adapt.f(1139,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk3>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1117,12)
<Distributed chunk2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1136,9) ]

   LOOP BEGIN at adapt.f(1140,11) inlined into adapt.f(1117,12)
   <Distributed chunk4>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,iy,2) (1141:13) and y(ix,iy,2) (1141:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,iy,2) (1141:13) and y(ix,iy,2) (1141:13)

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
         remark #15389: vectorization support: reference y(ix,iy,2) has unaligned access   [ adapt.f(1141,13) ]
         remark #15389: vectorization support: reference y(ix,iy,2) has unaligned access   [ adapt.f(1141,24) ]
         remark #15389: vectorization support: reference temp5(ix,iy,ip) has unaligned access   [ adapt.f(1141,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1140,11) inlined into adapt.f(1117,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1140,11) inlined into adapt.f(1117,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1140,11) inlined into adapt.f(1117,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1140,11) inlined into adapt.f(1117,12)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1117,12)
<Distributed chunk3>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,4)>, stride is 5   [ adapt.f(1146,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk1>
      remark #15389: vectorization support: reference y(ix,iy,4) has unaligned access   [ adapt.f(1146,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1117,12)
<Distributed chunk4>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1136,9) ]

   LOOP BEGIN at adapt.f(1147,11) inlined into adapt.f(1117,12)
   <Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,iy,4) (1148:13) and y(ix,iy,4) (1148:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,iy,4) (1148:13) and y(ix,iy,4) (1148:13)

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
         remark #15389: vectorization support: reference y(ix,iy,4) has unaligned access   [ adapt.f(1148,13) ]
         remark #15389: vectorization support: reference y(ix,iy,4) has unaligned access   [ adapt.f(1148,24) ]
         remark #15389: vectorization support: reference temp6(ix,iy,ip) has unaligned access   [ adapt.f(1148,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1147,11) inlined into adapt.f(1117,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1147,11) inlined into adapt.f(1117,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1147,11) inlined into adapt.f(1117,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1147,11) inlined into adapt.f(1117,12)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1117,12)
<Distributed chunk5>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,1)>, stride is 5   [ adapt.f(1137,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp5(ix,iy,1)>, stride is 5   [ adapt.f(1137,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk5>
      remark #15389: vectorization support: reference y(ix,iy,1) has unaligned access   [ adapt.f(1137,11) ]
      remark #15389: vectorization support: reference temp5(ix,iy,1) has unaligned access   [ adapt.f(1137,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk5>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1117,12)
<Distributed chunk6>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,3)>, stride is 5   [ adapt.f(1144,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp5(ix,iy,5)>, stride is 5   [ adapt.f(1144,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk6>
      remark #15389: vectorization support: reference y(ix,iy,3) has unaligned access   [ adapt.f(1144,11) ]
      remark #15389: vectorization support: reference temp5(ix,iy,5) has unaligned access   [ adapt.f(1144,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk6>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7) inlined into adapt.f(1117,12)
<Distributed chunk7>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,5)>, stride is 5   [ adapt.f(1151,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <temp6(ix,iy,5)>, stride is 5   [ adapt.f(1151,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk7>
      remark #15389: vectorization support: reference y(ix,iy,5) has unaligned access   [ adapt.f(1151,11) ]
      remark #15389: vectorization support: reference temp6(ix,iy,5) has unaligned access   [ adapt.f(1151,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9) inlined into adapt.f(1117,12)
   <Distributed chunk7>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: REMAPZ

    Report from: Vector optimizations [vec]


LOOP BEGIN at adapt.f(1135,7)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,2)>, stride is 5   [ adapt.f(1139,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk3>
      remark #15389: vectorization support: reference y(ix,iy,2) has unaligned access   [ adapt.f(1139,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk3>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7)
<Distributed chunk2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1136,9) ]

   LOOP BEGIN at adapt.f(1140,11)
   <Distributed chunk4>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,iy,2) (1141:13) and y(ix,iy,2) (1141:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,iy,2) (1141:13) and y(ix,iy,2) (1141:13)

      LOOP BEGIN at adapt.f(1136,9)
         remark #15389: vectorization support: reference y(ix,iy,2) has unaligned access   [ adapt.f(1141,13) ]
         remark #15389: vectorization support: reference y(ix,iy,2) has unaligned access   [ adapt.f(1141,24) ]
         remark #15389: vectorization support: reference x1(ix,iy,ip) has unaligned access   [ adapt.f(1141,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1140,11)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1140,11)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1140,11)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1140,11)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7)
<Distributed chunk3>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,4)>, stride is 5   [ adapt.f(1146,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk1>
      remark #15389: vectorization support: reference y(ix,iy,4) has unaligned access   [ adapt.f(1146,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7)
<Distributed chunk4>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1136,9) ]

   LOOP BEGIN at adapt.f(1147,11)
   <Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,iy,4) (1148:13) and y(ix,iy,4) (1148:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,iy,4) (1148:13) and y(ix,iy,4) (1148:13)

      LOOP BEGIN at adapt.f(1136,9)
         remark #15389: vectorization support: reference y(ix,iy,4) has unaligned access   [ adapt.f(1148,13) ]
         remark #15389: vectorization support: reference y(ix,iy,4) has unaligned access   [ adapt.f(1148,24) ]
         remark #15389: vectorization support: reference x2(ix,iy,ip) has unaligned access   [ adapt.f(1148,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1147,11)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1147,11)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1147,11)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1147,11)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END

      LOOP BEGIN at adapt.f(1136,9)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7)
<Distributed chunk5>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,1)>, stride is 5   [ adapt.f(1137,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ix,iy,1)>, stride is 5   [ adapt.f(1137,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk5>
      remark #15389: vectorization support: reference y(ix,iy,1) has unaligned access   [ adapt.f(1137,11) ]
      remark #15389: vectorization support: reference x1(ix,iy,1) has unaligned access   [ adapt.f(1137,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk5>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7)
<Distributed chunk6>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,3)>, stride is 5   [ adapt.f(1144,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ix,iy,5)>, stride is 5   [ adapt.f(1144,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk6>
      remark #15389: vectorization support: reference y(ix,iy,3) has unaligned access   [ adapt.f(1144,11) ]
      remark #15389: vectorization support: reference x1(ix,iy,5) has unaligned access   [ adapt.f(1144,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk6>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1135,7)
<Distributed chunk7>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,iy,5)>, stride is 5   [ adapt.f(1151,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ix,iy,5)>, stride is 5   [ adapt.f(1151,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk7>
      remark #15389: vectorization support: reference y(ix,iy,5) has unaligned access   [ adapt.f(1151,11) ]
      remark #15389: vectorization support: reference x2(ix,iy,5) has unaligned access   [ adapt.f(1151,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1136,9)
   <Distributed chunk7>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: REMAPY

    Report from: Vector optimizations [vec]


LOOP BEGIN at adapt.f(1171,7)
<Distributed chunk1>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,2,iz)>, stride is 25   [ adapt.f(1175,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk3>
      remark #15389: vectorization support: reference y(ix,2,iz) has unaligned access   [ adapt.f(1175,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk3>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk3>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7)
<Distributed chunk2>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1172,9) ]

   LOOP BEGIN at adapt.f(1176,11)
   <Distributed chunk4>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,2,iz) (1177:13) and y(ix,2,iz) (1177:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,2,iz) (1177:13) and y(ix,2,iz) (1177:13)

      LOOP BEGIN at adapt.f(1172,9)
         remark #15389: vectorization support: reference y(ix,2,iz) has unaligned access   [ adapt.f(1177,13) ]
         remark #15389: vectorization support: reference y(ix,2,iz) has unaligned access   [ adapt.f(1177,24) ]
         remark #15389: vectorization support: reference x1(ix,ip,iz) has unaligned access   [ adapt.f(1177,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1176,11)
   <Distributed chunk4>

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7)
<Distributed chunk3>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,4,iz)>, stride is 25   [ adapt.f(1182,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk1>
      remark #15389: vectorization support: reference y(ix,4,iz) has unaligned access   [ adapt.f(1182,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.170 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk1>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk1>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7)
<Distributed chunk4>
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ adapt.f(1172,9) ]

   LOOP BEGIN at adapt.f(1183,11)
   <Distributed chunk2>
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,4,iz) (1184:13) and y(ix,4,iz) (1184:13)
      remark #15346: vector dependence: assumed OUTPUT dependence between y(ix,4,iz) (1184:13) and y(ix,4,iz) (1184:13)

      LOOP BEGIN at adapt.f(1172,9)
         remark #15389: vectorization support: reference y(ix,4,iz) has unaligned access   [ adapt.f(1184,13) ]
         remark #15389: vectorization support: reference y(ix,4,iz) has unaligned access   [ adapt.f(1184,24) ]
         remark #15389: vectorization support: reference x2(ix,ip,iz) has unaligned access   [ adapt.f(1184,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.458
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END
   LOOP END

   LOOP BEGIN at adapt.f(1183,11)
   <Distributed chunk2>

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END

      LOOP BEGIN at adapt.f(1172,9)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7)
<Distributed chunk5>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,1,iz)>, stride is 25   [ adapt.f(1173,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ix,1,iz)>, stride is 25   [ adapt.f(1173,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk5>
      remark #15389: vectorization support: reference y(ix,1,iz) has unaligned access   [ adapt.f(1173,11) ]
      remark #15389: vectorization support: reference x1(ix,1,iz) has unaligned access   [ adapt.f(1173,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk5>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk5>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7)
<Distributed chunk6>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,3,iz)>, stride is 25   [ adapt.f(1180,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ix,5,iz)>, stride is 25   [ adapt.f(1180,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk6>
      remark #15389: vectorization support: reference y(ix,3,iz) has unaligned access   [ adapt.f(1180,11) ]
      remark #15389: vectorization support: reference x1(ix,5,iz) has unaligned access   [ adapt.f(1180,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk6>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk6>
   LOOP END
LOOP END

LOOP BEGIN at adapt.f(1171,7)
<Distributed chunk7>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(ix,5,iz)>, stride is 25   [ adapt.f(1187,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ix,5,iz)>, stride is 25   [ adapt.f(1187,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 0.900 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk7>
      remark #15389: vectorization support: reference y(ix,5,iz) has unaligned access   [ adapt.f(1187,11) ]
      remark #15389: vectorization support: reference x2(ix,5,iz) has unaligned access   [ adapt.f(1187,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 0.900 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk7>
   LOOP END

   LOOP BEGIN at adapt.f(1172,9)
   <Distributed chunk7>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: REMAPX

    Report from: Vector optimizations [vec]


LOOP BEGIN at adapt.f(1207,7)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(1,iy,iz)>, stride is 5   [ adapt.f(1209,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(2,iy,iz)>, stride is 5   [ adapt.f(1211,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <y(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <y(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <y(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <y(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(2,iy,iz)>, stride is 5   [ adapt.f(1213,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <y(2,iy,iz)>, stride is 5   [ adapt.f(1213,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(ip,iy,iz)>, stride is 5   [ adapt.f(1213,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(3,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x1(5,iy,iz)>, stride is 5   [ adapt.f(1216,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(4,iy,iz)>, stride is 5   [ adapt.f(1218,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <y(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <y(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <y(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <y(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(4,iy,iz)>, stride is 5   [ adapt.f(1220,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <y(4,iy,iz)>, stride is 5   [ adapt.f(1220,24) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(ip,iy,iz)>, stride is 5   [ adapt.f(1220,44) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <y(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x2(5,iy,iz)>, stride is 5   [ adapt.f(1223,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.073
   remark #15452: unmasked strided loads: 23 
   remark #15453: unmasked strided stores: 15 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 106 
   remark #15477: vector cost: 137.000 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at adapt.f(1212,11)
   LOOP END

   LOOP BEGIN at adapt.f(1219,11)
   LOOP END
LOOP END
===========================================================================
