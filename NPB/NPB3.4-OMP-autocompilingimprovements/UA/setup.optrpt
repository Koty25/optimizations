Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.1 Build 20201112_000000

Compiler options: -c -O4 -fopenmp -qopt-report=5 -qopt-report-phase=vec

Begin optimization report for: COEF

    Report from: Vector optimizations [vec]


LOOP BEGIN at setup.f(65,7)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ setup.f(77,9) ]

   LOOP BEGIN at setup.f(77,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ setup.f(78,11) ]

      LOOP BEGIN at setup.f(78,11)
         remark #15389: vectorization support: reference w3m1(i,j,k) has unaligned access   [ setup.f(79,13) ]
         remark #15389: vectorization support: reference wxm1(i) has unaligned access   [ setup.f(79,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.444
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 1.280 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END
   LOOP END

   LOOP BEGIN at setup.f(77,9)

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END
   LOOP END

   LOOP BEGIN at setup.f(77,9)

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END
   LOOP END

   LOOP BEGIN at setup.f(77,9)

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END
   LOOP END

   LOOP BEGIN at setup.f(77,9)

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END

      LOOP BEGIN at setup.f(78,11)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at setup.f(76,7)
LOOP END

LOOP BEGIN at setup.f(86,7)
   remark #15389: vectorization support: reference dxm1(Impl_lp+1,1) has unaligned access
   remark #15388: vectorization support: reference at (86:7) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.300
   remark #15301: MATERIALIZED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at setup.f(91,7)
   remark #15389: vectorization support: reference dxm1(i,j) has unaligned access   [ setup.f(103,11) ]
   remark #15389: vectorization support: reference dxm1(i,j) has unaligned access   [ setup.f(103,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <dxm1(Impl_lp+1,2)>, stride is -1
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (91:7)>, stride is -1
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dxm1(i+6,j+6)>, stride is -1   [ setup.f(103,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dxm1(i+6,j+6)>, stride is -1   [ setup.f(103,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.120
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15452: unmasked strided loads: 3 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 12.500 
   remark #15478: estimated potential speedup: 0.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at setup.f(102,9)
LOOP END

LOOP BEGIN at setup.f(107,9)
   remark #15389: vectorization support: reference dxtm1(i,j) has unaligned access   [ setup.f(108,11) ]
   remark #15389: vectorization support: reference dxtm1(i,j) has unaligned access   [ setup.f(108,11) ]
   remark #15389: vectorization support: reference dxtm1(i,j) has unaligned access   [ setup.f(108,11) ]
   remark #15389: vectorization support: reference dxtm1(i,j) has unaligned access   [ setup.f(108,11) ]
   remark #15389: vectorization support: reference dxtm1(i,j) has unaligned access   [ setup.f(108,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dxm1(j,i)>, stride is 5   [ setup.f(108,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dxm1(j,i)>, stride is 5   [ setup.f(108,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dxm1(j,i)>, stride is 5   [ setup.f(108,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dxm1(j,i)>, stride is 5   [ setup.f(108,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dxm1(j,i)>, stride is 5   [ setup.f(108,11) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <qbnew(i,j,2)>, stride is 3   [ setup.f(132,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <qbnew(i+4,j+6,1)>, stride is -3   [ setup.f(132,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.341
   remark #15451: unmasked unaligned unit stride stores: 5 
   remark #15452: unmasked strided loads: 6 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 22 
   remark #15477: vector cost: 22.000 
   remark #15478: estimated potential speedup: 0.880 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at setup.f(131,9)
      remark #15389: vectorization support: reference qbnew(i,j,2) has unaligned access   [ setup.f(132,11) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <qbnew(i+4,j+6,1)>, stride is -1   [ setup.f(132,11) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.429
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.500 
      remark #15478: estimated potential speedup: 0.850 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at setup.f(131,9)
   LOOP END

   LOOP BEGIN at setup.f(131,9)
   LOOP END

   LOOP BEGIN at setup.f(131,9)
   LOOP END

   LOOP BEGIN at setup.f(131,9)
   LOOP END
LOOP END

LOOP BEGIN at setup.f(130,7)
LOOP END

LOOP BEGIN at setup.f(86,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at setup.f(138,7)
   remark #15389: vectorization support: reference ixtmc1(Impl_lp+1,1) has unaligned access
   remark #15388: vectorization support: reference at (138:7) has aligned access
   remark #15389: vectorization support: reference ixtmc1(Impl_lp+1,2) has unaligned access   [ setup.f(143,7) ]
   remark #15388: vectorization support: reference at (143:7) has aligned access   [ setup.f(143,7) ]
   remark #15389: vectorization support: reference ixtmc1(Impl_lp+1,3) has unaligned access   [ setup.f(148,7) ]
   remark #15388: vectorization support: reference at (148:7) has aligned access   [ setup.f(148,7) ]
   remark #15389: vectorization support: reference ixtmc1(Impl_lp+1,4) has unaligned access   [ setup.f(153,7) ]
   remark #15388: vectorization support: reference at (153:7) has aligned access   [ setup.f(153,7) ]
   remark #15389: vectorization support: reference ixtmc1(Impl_lp+1,5) has unaligned access   [ setup.f(158,7) ]
   remark #15388: vectorization support: reference at (158:7) has aligned access   [ setup.f(158,7) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.214
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 5 
   remark #15451: unmasked unaligned unit stride stores: 5 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 19 
   remark #15477: vector cost: 17.500 
   remark #15478: estimated potential speedup: 0.910 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at setup.f(143,7)
LOOP END

LOOP BEGIN at setup.f(148,7)
LOOP END

LOOP BEGIN at setup.f(153,7)
LOOP END

LOOP BEGIN at setup.f(158,7)
LOOP END

LOOP BEGIN at setup.f(164,9)
   remark #15389: vectorization support: reference ixmc1(i,j) has unaligned access   [ setup.f(165,11) ]
   remark #15389: vectorization support: reference ixmc1(i,j) has unaligned access   [ setup.f(165,11) ]
   remark #15389: vectorization support: reference ixmc1(i,j) has unaligned access   [ setup.f(165,11) ]
   remark #15389: vectorization support: reference ixmc1(i,j) has unaligned access   [ setup.f(165,11) ]
   remark #15389: vectorization support: reference ixmc1(i,j) has unaligned access   [ setup.f(165,11) ]
   remark #15389: vectorization support: reference ixtmc2(i,j) has unaligned access   [ setup.f(171,11) ]
   remark #15389: vectorization support: reference ixtmc2(i,j) has unaligned access   [ setup.f(171,11) ]
   remark #15389: vectorization support: reference ixtmc2(i,j) has unaligned access   [ setup.f(171,11) ]
   remark #15389: vectorization support: reference ixtmc2(i,j) has unaligned access   [ setup.f(171,11) ]
   remark #15389: vectorization support: reference ixtmc2(i,j) has unaligned access   [ setup.f(171,11) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc1(j,i)>, stride is 5   [ setup.f(165,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc1(j,i)>, stride is 5   [ setup.f(165,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc1(j,i)>, stride is 5   [ setup.f(165,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc1(j,i)>, stride is 5   [ setup.f(165,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc1(j,i)>, stride is 5   [ setup.f(165,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc1(i+6,j+6)>, stride is -1   [ setup.f(171,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc1(i+6,j+6)>, stride is -1   [ setup.f(171,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc1(i+6,j+6)>, stride is -1   [ setup.f(171,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc1(i+6,j+6)>, stride is -1   [ setup.f(171,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc1(i+6,j+6)>, stride is -1   [ setup.f(171,11) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.429
   remark #15451: unmasked unaligned unit stride stores: 10 
   remark #15452: unmasked strided loads: 10 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 37 
   remark #15477: vector cost: 35.000 
   remark #15478: estimated potential speedup: 0.890 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at setup.f(170,9)
LOOP END

LOOP BEGIN at setup.f(138,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at setup.f(176,9)
<Peeled, Peeled loop for vectorization>
LOOP END

LOOP BEGIN at setup.f(176,9)
<Peeled>
   remark #15388: vectorization support: reference ixmc2(i,j) has aligned access   [ setup.f(177,11) ]
   remark #15389: vectorization support: reference ixmc2(i,j) has unaligned access   [ setup.f(177,11) ]
   remark #15388: vectorization support: reference ixmc2(i,j) has aligned access   [ setup.f(177,11) ]
   remark #15389: vectorization support: reference ixmc2(i,j) has unaligned access   [ setup.f(177,11) ]
   remark #15388: vectorization support: reference ixmc2(i,j) has aligned access   [ setup.f(177,11) ]
   remark #15388: vectorization support: reference map4(i) has aligned access   [ setup.f(190,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <map2(Impl_lp+1)>, stride is -1   [ setup.f(183,7) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (183:7)>, stride is -1   [ setup.f(183,7) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc2(j,i)>, stride is 5   [ setup.f(177,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc2(j,i)>, stride is 5   [ setup.f(177,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc2(j,i)>, stride is 5   [ setup.f(177,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc2(j,i)>, stride is 5   [ setup.f(177,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ixtmc2(j,i)>, stride is 5   [ setup.f(177,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <map2(i+6)>, stride is -1   [ setup.f(190,9) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.326
   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 4 
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15452: unmasked strided loads: 7 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 26 
   remark #15477: vector cost: 21.500 
   remark #15478: estimated potential speedup: 1.030 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at setup.f(183,7)
LOOP END

LOOP BEGIN at setup.f(189,7)
LOOP END

LOOP BEGIN at setup.f(176,9)
<Peeled, Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at setup.f(176,9)
<Peeled, Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: GEOM1

    Report from: Vector optimizations [vec]


LOOP BEGIN at setup.f(221,7)
   remark #15389: vectorization support: reference xfrac(i) has unaligned access   [ setup.f(222,9) ]
   remark #15389: vectorization support: reference zgm1_(i) has unaligned access   [ setup.f(222,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.273
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 1.210 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at setup.f(221,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at setup.f(227,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at setup.f(232,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at setup.f(233,11)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at setup.f(234,13)
         <Peeled loop for vectorization, Distributed chunk1>
         LOOP END

         LOOP BEGIN at setup.f(234,13)
         <Distributed chunk1>
            remark #15388: vectorization support: reference g1m1_s(i,j,k,isize) has aligned access   [ setup.f(238,15) ]
            remark #15389: vectorization support: reference w3m1(i,j,k) has unaligned access   [ setup.f(238,15) ]
            remark #15389: vectorization support: reference xrm1_s(i,j,k,isize) has unaligned access   [ setup.f(235,15) ]
            remark #15389: vectorization support: reference jacm1_s(i,j,k,isize) has unaligned access   [ setup.f(236,15) ]
            remark #15389: vectorization support: reference rxm1_s(i,j,k,isize) has unaligned access   [ setup.f(237,15) ]
            remark #15389: vectorization support: reference bm1_s(i,j,k,isize) has unaligned access   [ setup.f(239,15) ]
            remark #15389: vectorization support: reference w3m1(i,j,k) has unaligned access   [ setup.f(239,15) ]
            remark #15389: vectorization support: reference g4m1_s(i,j,k,isize) has unaligned access   [ setup.f(240,15) ]
            remark #15388: vectorization support: reference g1m1_s(i,j,k,isize) has aligned access   [ setup.f(240,15) ]
            remark #15389: vectorization support: reference wxm1(i) has unaligned access   [ setup.f(240,15) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.567
            remark #15301: PARTIAL LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 2 
            remark #15451: unmasked unaligned unit stride stores: 5 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 54 
            remark #15477: vector cost: 33.500 
            remark #15478: estimated potential speedup: 1.170 
            remark #15486: divides: 1 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at setup.f(234,13)
         <Remainder loop for vectorization, Distributed chunk1>
         LOOP END

         LOOP BEGIN at setup.f(234,13)
         <Distributed chunk2>
            remark #15389: vectorization support: reference g5m1_s(i,j,k,isize) has unaligned access   [ setup.f(241,15) ]
            remark #15389: vectorization support: reference g1m1_s(i,j,k,isize) has unaligned access   [ setup.f(241,15) ]
            remark #15389: vectorization support: reference g6m1_s(i,j,k,isize) has unaligned access   [ setup.f(242,15) ]
            remark #15389: vectorization support: reference g1m1_s(i,j,k,isize) has unaligned access   [ setup.f(242,15) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.087
            remark #15301: PARTIAL LOOP WAS VECTORIZED
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15451: unmasked unaligned unit stride stores: 2 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 60 
            remark #15477: vector cost: 37.500 
            remark #15478: estimated potential speedup: 1.340 
            remark #15486: divides: 2 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at setup.f(234,13)
         <Remainder loop for vectorization, Distributed chunk2>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at setup.f(250,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at setup.f(252,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at setup.f(253,11)
         remark #15389: vectorization support: reference idel_(i,j,1,iel) has unaligned access   [ setup.f(254,13) ]
         remark #15389: vectorization support: reference idel_(i,j,2,iel) has unaligned access   [ setup.f(255,13) ]
         remark #15389: vectorization support: reference idel_(i,j,3,iel) has unaligned access   [ setup.f(256,13) ]
         remark #15389: vectorization support: reference idel_(i,j,4,iel) has unaligned access   [ setup.f(257,13) ]
         remark #15389: vectorization support: reference idel_(i,j,5,iel) has unaligned access   [ setup.f(258,13) ]
         remark #15389: vectorization support: reference idel_(i,j,6,iel) has unaligned access   [ setup.f(259,13) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.500
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 6 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 41 
         remark #15477: vector cost: 9.000 
         remark #15478: estimated potential speedup: 2.150 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at setup.f(253,11)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: SETDEF

    Report from: Vector optimizations [vec]


LOOP BEGIN at setup.f(282,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <wdtdr(i,j)>, stride is 5   [ setup.f(284,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <wdtdr(i,j)>, stride is 5   [ setup.f(284,13) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <dxm1_(ip,j)>, stride is 5   [ setup.f(284,47) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.471
   remark #15452: unmasked strided loads: 2 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 12 
   remark #15477: vector cost: 8.500 
   remark #15478: estimated potential speedup: 1.110 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at setup.f(281,7)
      remark #15389: vectorization support: reference wdtdr(i,j) has unaligned access   [ setup.f(284,13) ]
      remark #15389: vectorization support: reference wdtdr(i,j) has unaligned access   [ setup.f(284,13) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <dxm1_(ip,i)>, stride is 5   [ setup.f(284,13) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.824
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 12 
      remark #15477: vector cost: 8.500 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at setup.f(283,11)
         remark #15389: vectorization support: reference wxm1_(ip) has unaligned access   [ setup.f(284,13) ]
         remark #15389: vectorization support: reference dxm1_(ip,i) has unaligned access   [ setup.f(284,13) ]
         remark #15389: vectorization support: reference dxm1_(ip,j) has unaligned access   [ setup.f(284,47) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.321
         remark #15355: vectorization support: wdtdr(i,j) is double type reduction   [ setup.f(284,13) ]
         remark #15450: unmasked unaligned unit stride loads: 3 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 12 
         remark #15477: vector cost: 7.000 
         remark #15478: estimated potential speedup: 1.220 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END
   LOOP END

   LOOP BEGIN at setup.f(281,7)

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END
   LOOP END

   LOOP BEGIN at setup.f(281,7)

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END
   LOOP END

   LOOP BEGIN at setup.f(281,7)

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END
   LOOP END

   LOOP BEGIN at setup.f(281,7)

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END

      LOOP BEGIN at setup.f(283,11)
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PREPWORK

    Report from: Vector optimizations [vec]


LOOP BEGIN at setup.f(314,7)
   remark #15389: vectorization support: reference size_e_(iel) has unaligned access   [ setup.f(316,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xc_(2,iel)>, stride is unknown to compiler   [ setup.f(316,27) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <xc_(1,iel)>, stride is unknown to compiler   [ setup.f(316,37) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.065
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 117 
   remark #15477: vector cost: 46.000 
   remark #15478: estimated potential speedup: 2.540 
   remark #15482: vectorized math library calls: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at setup.f(314,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at setup.f(323,7)
   remark #15382: vectorization support: call to function r_init_ cannot be vectorized   [ setup.f(324,14) ]
   remark #15382: vectorization support: call to function facev_ cannot be vectorized   [ setup.f(326,16) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization

   LOOP BEGIN at setup.f(325,9)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at setup.f(333,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at setup.f(333,7)
   remark #15388: vectorization support: reference tmmor_(iel) has aligned access   [ setup.f(335,9) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at setup.f(333,7)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at setup.f(340,7)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between tmmor_(idmo_(i,j,1,1,iface,iel)) (346:16) and tmmor_(idmo_(1,j,2,1,iface,iel)) (401:16)
   remark #15346: vector dependence: assumed OUTPUT dependence between tmmor_(idmo_(1,j,2,1,iface,iel)) (401:16) and tmmor_(idmo_(i,j,1,1,iface,iel)) (346:16)

   LOOP BEGIN at setup.f(341,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between tmmor_(idmo_(i,j,1,1,iface,iel)) (346:16) and tmmor_(idmo_(1,j,2,1,iface,iel)) (401:16)
      remark #15346: vector dependence: assumed OUTPUT dependence between tmmor_(idmo_(1,j,2,1,iface,iel)) (401:16) and tmmor_(idmo_(i,j,1,1,iface,iel)) (346:16)

      LOOP BEGIN at setup.f(344,13)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between tmmor_(idmo_(i,j,1,1,iface,iel)) (346:16) and tmmor_(idmo_(i,j,1,1,iface,iel)) (346:16)
         remark #15346: vector dependence: assumed OUTPUT dependence between tmmor_(idmo_(i,j,1,1,iface,iel)) (346:16) and tmmor_(idmo_(i,j,1,1,iface,iel)) (346:16)

         LOOP BEGIN at setup.f(345,15)
            remark #15389: vectorization support: reference idmo_(i,j,1,1,iface,iel) has unaligned access   [ setup.f(346,16) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmmor_(idmo_(i,j,1,1,iface,iel))>, part of index is read from memory   [ setup.f(346,16) ]
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15463: unmasked indexed (or scatter) stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 5 
            remark #15477: vector cost: 5.000 
            remark #15478: estimated potential speedup: 0.830 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at setup.f(345,15)
         LOOP END

         LOOP BEGIN at setup.f(345,15)
         LOOP END
      LOOP END

      LOOP BEGIN at setup.f(351,13)
         remark #15389: vectorization support: reference idmo_(i,1,1,1,iface,iel) has unaligned access   [ setup.f(352,16) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmmor_(idmo_(i,1,1,1,iface,iel))>, part of index is read from memory   [ setup.f(352,16) ]
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.150
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 0.860 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at setup.f(359,15)
         remark #15389: vectorization support: reference idmo_(i,1,1,2,iface,iel) has unaligned access   [ setup.f(360,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmmor_(idmo_(i,1,1,2,iface,iel))>, part of index is read from memory   [ setup.f(360,17) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.150
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 0.890 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at setup.f(366,15)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <idmo_(5,j,1,1,iface,iel)>, stride is unknown to compiler   [ setup.f(367,17) ]
         remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmmor_(idmo_(5,j,1,1,iface,iel))>, part of index is read from memory   [ setup.f(367,17) ]
         remark #15305: vectorization support: vector length 2
         remark #15452: unmasked strided loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 7.000 
         remark #15478: estimated potential speedup: 0.780 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at setup.f(371,15)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <idmo_(5,j,1,2,iface,iel)>, stride is unknown to compiler   [ setup.f(372,17) ]
         remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmmor_(idmo_(5,j,1,2,iface,iel))>, part of index is read from memory   [ setup.f(372,17) ]
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15399: vectorization support: unroll factor set to 2
         remark #15452: unmasked strided loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 7.000 
         remark #15478: estimated potential speedup: 0.710 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at setup.f(374,15)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <idmo_(5,j,2,2,iface,iel)>, stride is unknown to compiler   [ setup.f(375,17) ]
         remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmmor_(idmo_(5,j,2,2,iface,iel))>, part of index is read from memory   [ setup.f(375,17) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15452: unmasked strided loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 7.000 
         remark #15478: estimated potential speedup: 0.750 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at setup.f(382,15)
         remark #15389: vectorization support: reference idmo_(i,5,1,1,iface,iel) has unaligned access   [ setup.f(383,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmmor_(idmo_(i,5,1,1,iface,iel))>, part of index is read from memory   [ setup.f(383,17) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 0.830 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at setup.f(386,15)
         remark #15389: vectorization support: reference idmo_(i,5,2,1,iface,iel) has unaligned access   [ setup.f(387,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmmor_(idmo_(i,5,2,1,iface,iel))>, part of index is read from memory   [ setup.f(387,17) ]
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.150
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 0.860 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at setup.f(389,15)
         remark #15389: vectorization support: reference idmo_(i,5,2,2,iface,iel) has unaligned access   [ setup.f(390,17) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmmor_(idmo_(i,5,2,2,iface,iel))>, part of index is read from memory   [ setup.f(390,17) ]
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.150
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 0.860 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at setup.f(395,13)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <idmo_(1,j,1,1,iface,iel)>, stride is unknown to compiler   [ setup.f(396,14) ]
         remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmmor_(idmo_(1,j,1,1,iface,iel))>, part of index is read from memory   [ setup.f(396,14) ]
         remark #15305: vectorization support: vector length 2
         remark #15452: unmasked strided loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 7.000 
         remark #15478: estimated potential speedup: 0.780 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at setup.f(400,15)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <idmo_(1,j,2,1,iface,iel)>, stride is unknown to compiler   [ setup.f(401,16) ]
         remark #15329: vectorization support: irregularly indexed store was emulated for the variable <tmmor_(idmo_(1,j,2,1,iface,iel))>, part of index is read from memory   [ setup.f(401,16) ]
         remark #15305: vectorization support: vector length 2
         remark #15427: loop was completely unrolled
         remark #15399: vectorization support: unroll factor set to 2
         remark #15452: unmasked strided loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 7.000 
         remark #15478: estimated potential speedup: 0.710 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at setup.f(344,13)

         LOOP BEGIN at setup.f(345,15)
         LOOP END

         LOOP BEGIN at setup.f(345,15)
         LOOP END

         LOOP BEGIN at setup.f(345,15)
         LOOP END
      LOOP END

      LOOP BEGIN at setup.f(351,13)
      LOOP END

      LOOP BEGIN at setup.f(359,15)
      LOOP END

      LOOP BEGIN at setup.f(366,15)
      LOOP END

      LOOP BEGIN at setup.f(371,15)
      LOOP END

      LOOP BEGIN at setup.f(374,15)
      LOOP END

      LOOP BEGIN at setup.f(382,15)
      LOOP END

      LOOP BEGIN at setup.f(386,15)
      LOOP END

      LOOP BEGIN at setup.f(389,15)
      LOOP END

      LOOP BEGIN at setup.f(395,13)
      LOOP END

      LOOP BEGIN at setup.f(400,15)
      LOOP END

      LOOP BEGIN at setup.f(344,13)

         LOOP BEGIN at setup.f(345,15)
         LOOP END

         LOOP BEGIN at setup.f(345,15)
         LOOP END

         LOOP BEGIN at setup.f(345,15)
         LOOP END
      LOOP END

      LOOP BEGIN at setup.f(351,13)
      LOOP END

      LOOP BEGIN at setup.f(359,15)
      LOOP END

      LOOP BEGIN at setup.f(366,15)
      LOOP END

      LOOP BEGIN at setup.f(371,15)
      LOOP END

      LOOP BEGIN at setup.f(374,15)
      LOOP END

      LOOP BEGIN at setup.f(382,15)
      LOOP END

      LOOP BEGIN at setup.f(386,15)
      LOOP END

      LOOP BEGIN at setup.f(389,15)
      LOOP END

      LOOP BEGIN at setup.f(395,13)
      LOOP END

      LOOP BEGIN at setup.f(400,15)
      LOOP END

      LOOP BEGIN at setup.f(344,13)

         LOOP BEGIN at setup.f(345,15)
         LOOP END

         LOOP BEGIN at setup.f(345,15)
         LOOP END

         LOOP BEGIN at setup.f(345,15)
         LOOP END
      LOOP END

      LOOP BEGIN at setup.f(351,13)
      LOOP END

      LOOP BEGIN at setup.f(359,15)
      LOOP END

      LOOP BEGIN at setup.f(366,15)
      LOOP END

      LOOP BEGIN at setup.f(371,15)
      LOOP END

      LOOP BEGIN at setup.f(374,15)
      LOOP END

      LOOP BEGIN at setup.f(382,15)
      LOOP END

      LOOP BEGIN at setup.f(386,15)
      LOOP END

      LOOP BEGIN at setup.f(389,15)
      LOOP END

      LOOP BEGIN at setup.f(395,13)
      LOOP END

      LOOP BEGIN at setup.f(400,15)
      LOOP END

      LOOP BEGIN at setup.f(344,13)

         LOOP BEGIN at setup.f(345,15)
         LOOP END

         LOOP BEGIN at setup.f(345,15)
         LOOP END

         LOOP BEGIN at setup.f(345,15)
         LOOP END
      LOOP END

      LOOP BEGIN at setup.f(351,13)
      LOOP END

      LOOP BEGIN at setup.f(359,15)
      LOOP END

      LOOP BEGIN at setup.f(366,15)
      LOOP END

      LOOP BEGIN at setup.f(371,15)
      LOOP END

      LOOP BEGIN at setup.f(374,15)
      LOOP END

      LOOP BEGIN at setup.f(382,15)
      LOOP END

      LOOP BEGIN at setup.f(386,15)
      LOOP END

      LOOP BEGIN at setup.f(389,15)
      LOOP END

      LOOP BEGIN at setup.f(395,13)
      LOOP END

      LOOP BEGIN at setup.f(400,15)
      LOOP END

      LOOP BEGIN at setup.f(344,13)

         LOOP BEGIN at setup.f(345,15)
         LOOP END

         LOOP BEGIN at setup.f(345,15)
         LOOP END

         LOOP BEGIN at setup.f(345,15)
         LOOP END
      LOOP END

      LOOP BEGIN at setup.f(351,13)
      LOOP END

      LOOP BEGIN at setup.f(359,15)
      LOOP END

      LOOP BEGIN at setup.f(366,15)
      LOOP END

      LOOP BEGIN at setup.f(371,15)
      LOOP END

      LOOP BEGIN at setup.f(374,15)
      LOOP END

      LOOP BEGIN at setup.f(382,15)
      LOOP END

      LOOP BEGIN at setup.f(386,15)
      LOOP END

      LOOP BEGIN at setup.f(389,15)
      LOOP END

      LOOP BEGIN at setup.f(395,13)
      LOOP END

      LOOP BEGIN at setup.f(400,15)
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: CREATE_INITIAL_GRID

    Report from: Vector optimizations [vec]


LOOP BEGIN at setup.f(15,9)
   remark #15389: vectorization support: reference xc_(i,1) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i,1)>, stride is 2
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <xc_(i+1,1)>, stride is 2   [ setup.f(16,9) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.125
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 6.000 
   remark #15478: estimated potential speedup: 1.030 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at setup.f(20,9)
   remark #15389: vectorization support: reference yc_(i,1) has unaligned access
   remark #15389: vectorization support: reference yc_(i+2,1) has unaligned access   [ setup.f(21,9) ]
   remark #15389: vectorization support: reference yc_(i+4,1) has unaligned access   [ setup.f(22,9) ]
   remark #15389: vectorization support: reference yc_(i+6,1) has unaligned access   [ setup.f(23,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15451: unmasked unaligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 14 
   remark #15477: vector cost: 10.000 
   remark #15478: estimated potential speedup: 0.870 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at setup.f(27,9)
   remark #15389: vectorization support: reference zc_(i,1) has unaligned access
   remark #15389: vectorization support: reference zc_(i+4,1) has unaligned access   [ setup.f(28,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.300
   remark #15300: LOOP WAS VECTORIZED
   remark #15451: unmasked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 1.070 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at setup.f(32,9)
   remark #15389: vectorization support: reference cbc_(i,1) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15309: vectorization support: normalized vectorization overhead 0.167
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.570 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================
