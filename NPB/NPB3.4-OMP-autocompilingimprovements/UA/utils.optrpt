Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on Intel(R) 64, Version 2021.1 Build 20201112_000000

Compiler options: -c -O4 -fopenmp -qopt-report=5 -qopt-report-phase=vec

Begin optimization report for: RECIPROCAL

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(12,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at utils.f(12,7)
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(14,9) ]
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(14,21) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.071
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 30 
   remark #15477: vector cost: 17.500 
   remark #15478: estimated potential speedup: 1.690 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at utils.f(12,7)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(14,9) ]
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(14,21) ]
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.256
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 30 
   remark #15477: vector cost: 17.500 
   remark #15478: estimated potential speedup: 1.690 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: NCOPY

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(121,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at utils.f(121,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at utils.f(121,7)
      remark #15388: vectorization support: reference a(i) has aligned access   [ utils.f(122,9) ]
      remark #15388: vectorization support: reference b(i) has aligned access   [ utils.f(122,9) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 2.130 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at utils.f(121,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at utils.f(121,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: COPY

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(139,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at utils.f(139,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at utils.f(139,7)
      remark #15388: vectorization support: reference a(i) has aligned access   [ utils.f(140,10) ]
      remark #15388: vectorization support: reference b(i) has aligned access   [ utils.f(140,10) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.290 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at utils.f(139,7)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at utils.f(139,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ADDS2M1

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(155,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at utils.f(155,7)
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(157,9) ]
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(157,14) ]
   remark #15388: vectorization support: reference b has aligned access   [ utils.f(157,22) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 2.180 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at utils.f(155,7)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at utils.f(155,7)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(157,9) ]
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(157,14) ]
   remark #15389: vectorization support: reference b has unaligned access   [ utils.f(157,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 2.180 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: ADDS1M1

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(174,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at utils.f(174,7)
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(176,9) ]
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(176,17) ]
   remark #15388: vectorization support: reference b has aligned access   [ utils.f(176,22) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 2.180 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at utils.f(174,7)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at utils.f(174,7)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(176,9) ]
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(176,17) ]
   remark #15389: vectorization support: reference b has unaligned access   [ utils.f(176,22) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 2.180 
   remark #15488: --- end vector cost summary ---
LOOP END
===========================================================================

Begin optimization report for: COL2

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(194,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at utils.f(194,7)
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(196,9) ]
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(196,14) ]
   remark #15388: vectorization support: reference b has aligned access   [ utils.f(196,19) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.583
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.940 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at utils.f(194,7)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at utils.f(194,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: NRZERO

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(213,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at utils.f(213,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at utils.f(213,7)
      remark #15388: vectorization support: reference na(i) has aligned access   [ utils.f(214,9) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at utils.f(213,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ADD2

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(230,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at utils.f(230,7)
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(232,9) ]
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(232,14) ]
   remark #15388: vectorization support: reference b has aligned access   [ utils.f(232,19) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.700
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 2.310 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at utils.f(230,7)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at utils.f(230,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: CALC_NORM

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(255,7)
   remark #15389: vectorization support: reference size_e_(iel) has unaligned access   [ utils.f(257,9) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ta1_(i,j,k,iel)>, stride is unknown to compiler   [ utils.f(261,33) ]
   remark #15328: vectorization support: indirect load was emulated for the variable <jacm1_s(i,j,k,isize)>, 64-bit indexed, part of address is read from memory   [ utils.f(261,47) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.627
   remark #15355: vectorization support: %total is double type reduction   [ utils.f(252,7) ]
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 29.500 
   remark #15478: estimated potential speedup: 0.700 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at utils.f(258,9)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <ta1_(i,j,k,iel)>, stride is unknown to compiler   [ utils.f(261,33) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <w3m1(i,j,k)>, stride is 25   [ utils.f(261,33) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <jacm1_s(i,j,k,isize)>, stride is 25   [ utils.f(261,47) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15355: vectorization support: ieltotal is double type reduction   [ utils.f(256,9) ]
      remark #15452: unmasked strided loads: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 9.500 
      remark #15478: estimated potential speedup: 0.800 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at utils.f(259,11)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <ta1_(i,j,k,iel)>, stride is unknown to compiler   [ utils.f(261,33) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <w3m1(i,j,k)>, stride is 5   [ utils.f(261,33) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <jacm1_s(i,j,k,isize)>, stride is 5   [ utils.f(261,47) ]
         remark #15305: vectorization support: vector length 2
         remark #15355: vectorization support: ieltotal is double type reduction   [ utils.f(256,9) ]
         remark #15452: unmasked strided loads: 3 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 9.000 
         remark #15478: estimated potential speedup: 1.170 
         remark #15488: --- end vector cost summary ---

         LOOP BEGIN at utils.f(260,13)
            remark #15389: vectorization support: reference ta1_(i,j,k,iel) has unaligned access   [ utils.f(261,33) ]
            remark #15389: vectorization support: reference w3m1(i,j,k) has unaligned access   [ utils.f(261,33) ]
            remark #15389: vectorization support: reference jacm1_s(i,j,k,isize) has unaligned access   [ utils.f(261,47) ]
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.321
            remark #15355: vectorization support: ieltotal is double type reduction   [ utils.f(256,9) ]
            remark #15450: unmasked unaligned unit stride loads: 3 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 11 
            remark #15477: vector cost: 7.000 
            remark #15478: estimated potential speedup: 1.140 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END
      LOOP END

      LOOP BEGIN at utils.f(259,11)

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END
      LOOP END

      LOOP BEGIN at utils.f(259,11)

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END
      LOOP END

      LOOP BEGIN at utils.f(259,11)

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END
      LOOP END

      LOOP BEGIN at utils.f(259,11)

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END

         LOOP BEGIN at utils.f(260,13)
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: PARALLEL_ADD

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(290,7)
   remark #15523: loop was not vectorized: loop control variable nellog was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at utils.f(293,7)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ utils.f(295,7) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ utils.f(295,7) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ utils.f(295,7) ]
   remark #15382: vectorization support: call to function .9 cannot be vectorized   [ utils.f(295,7) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ utils.f(295,7) ]
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ utils.f(308,7) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ utils.f(308,7) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ utils.f(308,7) ]
   remark #15382: vectorization support: call to function .10 cannot be vectorized   [ utils.f(308,7) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ utils.f(308,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n1 (294:9) and n1 (295:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between n1 (295:7) and n1 (294:9)
LOOP END

LOOP BEGIN at utils.f(296,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at utils.f(298,11)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at utils.f(298,11)
      remark #15388: vectorization support: reference frontier(iel-ii) has aligned access   [ utils.f(299,13) ]
      remark #15388: vectorization support: reference frontier(iel-ii) has aligned access   [ utils.f(299,30) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 2.600
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.250 
      remark #15478: estimated potential speedup: 3.720 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at utils.f(298,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at utils.f(308,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at utils.f(308,7)
   remark #15388: vectorization support: reference frontier(iel-ii) has aligned access   [ utils.f(310,13) ]
   remark #15388: vectorization support: reference frontier(iel-ii) has aligned access   [ utils.f(310,30) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 2.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.720 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at utils.f(308,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: FACEV

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(362,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at utils.f(363,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at utils.f(364,11)
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <a(ix,iy,iz)>, stride is 25   [ utils.f(365,13) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.083
         remark #15300: LOOP WAS VECTORIZED
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 1.320 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at utils.f(364,11)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: L_INIT_OMP

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(101,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at utils.f(101,7)
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(103,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.460 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at utils.f(101,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: NR_INIT

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(85,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at utils.f(85,7)
   remark #15388: vectorization support: reference a(i) has aligned access   [ utils.f(86,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.460 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at utils.f(85,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: NR_INIT_OMP

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(66,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at utils.f(66,7)
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(68,9) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.460 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at utils.f(66,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: R_INIT

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(50,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at utils.f(50,7)
   remark #15388: vectorization support: reference a(i) has aligned access   [ utils.f(51,9) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at utils.f(50,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: R_INIT_OMP

    Report from: Vector optimizations [vec]


LOOP BEGIN at utils.f(31,7)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at utils.f(31,7)
   remark #15388: vectorization support: reference a has aligned access   [ utils.f(33,9) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.540 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at utils.f(31,7)
<Remainder loop for vectorization>
LOOP END
===========================================================================
